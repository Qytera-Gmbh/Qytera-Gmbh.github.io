{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Your browser does not support the video tag.     Two passing tests and one failing test for https://example.org. A Cypress plugin for Xray integration. Supports Xray Server/DC and Xray Cloud. <ul> <li>Upload test results to Xray</li> <li>Attach screenshots as test execution evidence</li> <li>Attach web requests as test execution evidence</li> <li>Attach videos to test execution issues</li> <li>Reuse existing test execution and test plan issues</li> <li>CI/CD ready</li> <li>Cucumber support</li> </ul> <p> image/svg+xml Cucumber only:</p> <ul> <li>Automatic import of feature files to Jira</li> </ul> <p> Future features:</p> <ul> <li>Automatic execution of Cucumber tests based on Xray step definitions</li> </ul> <p>Note</p> <p>This plugin only works when running Cypress through the CLI (i.e. <code>npx cypress run</code>).</p>"},{"location":"section/configuration/authentication/","title":"Authentication","text":"<p>To use this plugin, you need to authenticate to both your Xray instance and your Jira instance. You must do this by setting up specific environment variables, e.g. a client ID and a client secret when using a cloud based Xray instance.</p> <p>To avoid adding your secrets to system environment variables, simply pass them to Cypress as a comma-separated list in the command line:</p> <pre><code>npx cypress run --env XRAY_CLIENT_ID=\"ABCDEF\",XRAY_CLIENT_SECRET=\"XYZ\"\n</code></pre> <p>Tip</p> <p>Have a look at this graph to quickly set up Xray and Jira authentication. Note that Xray server does not require dedicated credentials in addition to the Jira credentials, effectively setting up both at the same time. <pre><code>graph TD\n    A{Xray&lt;br/&gt;instance};\n    B(\"`\n      XRAY_CLIENT_ID=&lt;i&gt;id&lt;/i&gt;\n      XRAY_CLIENT_SECRET=&lt;i&gt;secret&lt;/i&gt;\n      %% Prevent mermaid from parsing the mail address as a buggy link with word join characters\n      JIRA_USERNAME=&lt;i&gt;user#8288;@#8288;company.com&lt;/i&gt;\n      JIRA_API_TOKEN=&lt;i&gt;token&lt;/i&gt;\n    `\");\n    C{Jira&lt;br/&gt;auth};\n    A ---&gt;|Cloud| B;\n    A ---&gt;|Server| C;\n    C ---&gt;|PAT| D;\n    C ---&gt;|Basic| E;\n    D(\"JIRA_API_TOKEN=&lt;i&gt;token&lt;/i&gt;\");\n    E(\"JIRA_USERNAME=&lt;i&gt;user&lt;/i&gt;&lt;br&gt;JIRA_PASSWORD=&lt;i&gt;password&lt;/i&gt;\");\n    classDef code-node font-family:monospace,text-align:left;\n    class B,D,E code-node;</code></pre></p>"},{"location":"section/configuration/authentication/#xray","title":"Xray","text":"<p>Depending on the provided combinations of environment variables, the plugin will automatically know which Xray API type to use.</p> Providing multiple combinations <p>When providing more than one valid combination of variables, evaluation precedence of the authentication methods is as follows:</p> <ol> <li>Cloud authentication</li> <li>PAT authentication</li> <li>Basic authentication</li> </ol> <p>Below you will find all Xray authentication configurations that are currently supported and the environment variables you need to set to authenticate to their respective APIs.</p>"},{"location":"section/configuration/authentication/#xray-cloud","title":"Xray cloud","text":"<p>For the cloud version of Xray, the plugin expects the following environment variables to be set:</p> <ul> <li><code>XRAY_CLIENT_ID</code></li> <li><code>XRAY_CLIENT_SECRET</code></li> </ul> <p>Info</p> <p>Consult Xray's official documentation on how to set up cloud API keys.</p> <p>Example</p> <pre><code>npx cypress run --env XRAY_CLIENT_ID=\"ABCDEF\",XRAY_CLIENT_SECRET=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#xray-server","title":"Xray server","text":"<p>For setting up Xray server authentication, see Jira server authentication.</p> <p>Note</p> <p>Xray server does not require any additional credentials.</p>"},{"location":"section/configuration/authentication/#jira","title":"Jira","text":"<p>As with Xray authentication, the plugin will automatically choose the authentication method depending on the provided environment variables.</p> Providing multiple combinations <p>When providing more than one valid combination of variables, evaluation precedence of the authentication methods is as follows:</p> <ol> <li>Basic authentication (Jira cloud)</li> <li>PAT authentication (Jira server)</li> <li>Basic authentication (Jira server)</li> </ol> <p>Below you will find all currently supported Jira authentication configurations and the environment variables you need to set.</p>"},{"location":"section/configuration/authentication/#jira-cloud","title":"Jira cloud","text":"<p>For the cloud version of Jira, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_USERNAME</code></li> <li><code>JIRA_API_TOKEN</code></li> </ul> <p>Info</p> <p>Consult Jira's official documentation on how to set up cloud credentials.</p> <p>Example</p> <pre><code>npx cypress run --env JIRA_USERNAME=\"user@company.com\",JIRA_API_TOKEN=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#jira-server","title":"Jira server","text":"<p>Depending on your Jira version, you may either need to use Jira's Personal Access Tokens (PATs) to authenticate to Jira, or Basic Authentication using your Jira username and password.</p> <p>Tip</p> <p>If you do not know which one you should be using, simply try PAT authentication first. If it works, great! You should stick to it, as PATs are a safer alternative to using usernames and passwords.</p> <p>If PAT-based authentication does not work or you cannot even create tokens, you will need to use basic authentication.</p>"},{"location":"section/configuration/authentication/#pat-authentication","title":"PAT authentication","text":"<p>For PAT authentication, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_API_TOKEN</code></li> </ul> <p>Info</p> <p>Consult Jira's official documentation on how to set up server API tokens.</p> <p>Example</p> <pre><code>npx cypress run --env JIRA_API_TOKEN=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#basic-authentication","title":"Basic authentication","text":"<p>For basic authentication, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_USERNAME</code></li> <li><code>JIRA_PASSWORD</code></li> </ul> <p>Example</p> <pre><code>npx cypress run --env JIRA_USERNAME=\"Bob\",JIRA_PASSWORD=\"superSecure!unhaxx0rable\"\n</code></pre>"},{"location":"section/configuration/cucumber/","title":"Cucumber","text":"<p>When Cucumber is enabled, you can use the following options to configure the way the plugin works with your feature files.</p>"},{"location":"section/configuration/cucumber/#mandatory-settings","title":"Mandatory settings","text":""},{"location":"section/configuration/cucumber/#featurefileextension","title":"<code>featureFileExtension</code>","text":"<p>The file extension of feature files you want to run in Cypress. The plugin will use this to parse all matching files to extract any tags contained within them. Such tags are needed to identify to which test issue a feature file belongs (see targeting existing test issues with Cucumber).</p> Environment variable <code>CUCUMBER_FEATURE_FILE_EXTENSION</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        featureFileExtension: \".feature\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_FEATURE_FILE_EXTENSION=\".feature\"\n</code></pre>"},{"location":"section/configuration/cucumber/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/cucumber/#downloadfeatures","title":"<code>downloadFeatures</code>","text":"<p>Development</p> <p>This feature will be added in future versions of the plugin.</p> <p>Set it to true to automatically download feature files from Xray for Cypress to execute.</p> <p>Note</p> <p>Enable this option if the source of truth for test cases are step definitions in Xray and Cypress is only used for running tests.</p> Environment variable <code>CUCUMBER_DOWNLOAD_FEATURES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        downloadFeatures: true\n    },\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_DOWNLOAD_FEATURES=true\n</code></pre>"},{"location":"section/configuration/cucumber/#prefixes","title":"<code>prefixes</code>","text":"<p>Whenever Cucumber test results or entire feature files are imported, Xray tries to link existing test and precondition Jira issues with the executed/present Cucumber scenarios and backgrounds. The default matching is quite involved (see documentation for Xray server or Xray cloud), but luckily Xray also supports and uses feature file tags. The tags are of the form <code>@[prefix]CYP-123</code>, containing an optional prefix and the issue key. The concrete prefix and whether a prefix is at all necessary depends on your configured prefix scheme in Xray.</p> <p>The scheme itself can be viewed and configured in Xray:</p> <ul> <li>Xray server</li> <li>Xray cloud</li> </ul> <p>What if I don't have access to Xray's configuration?</p> <p>The easiest way to identify the prefixes you need to use is to export an existing test issue to a Cucumber feature file.</p> <ul> <li>Xray server</li> <li>Xray cloud</li> </ul> <p>If the test issue has preconditions, test sets and requirements (see Xray server or Xray cloud) configured, the exported feature file will automatically contain the full tagging scheme. This scheme can subsequently be used to configure the plugin accordingly.</p> <p>Example</p> <p>Let's assume that the Xray tagging scheme is defined as follows:</p> <p></p> <p>Scenarios then need to be annotated with <code>@TestName:&lt;key&gt;</code> to link the scenarios to an existing test issue in Jira. Correspondingly, backgrounds will need be tagged with <code>@Precondition:&lt;key&gt;</code> inside the first step's comment to link to existing precondition issues.</p> <pre><code>Feature: A cool story\n\n    Background:\n        #@Precondition:CYP-222\n        Given A\n        When B\n        Then C\n\n    @TestName:CYP-333\n    Scenario: Scenario 1\n        Given X\n        When Y\n        Then Z\n</code></pre>"},{"location":"section/configuration/cucumber/#precondition","title":"<code>precondition</code>","text":"<p>The prefix for Cucumber background tags.</p> <p>If left undefined, the plugin will assume that your Xray instance is able to properly parse issue tags without any prefixes, e.g. background tags of the form <code>@CYP-123</code> instead of something like <code>@Precondition:CYP-123</code>.</p> Environment variable <code>CUCUMBER_PREFIXES_PRECONDITION</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        prefixes: {\n            precondition: \"Precondition:\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_PREFIXES_PRECONDITION=\"Precondition:\"\n</code></pre>"},{"location":"section/configuration/cucumber/#test","title":"<code>test</code>","text":"<p>The prefix for Cucumber scenario tags.</p> <p>If left undefined, the plugin will assume that your Xray instance is able to properly parse issue tags without any prefixes, e.g. scenario tags of the form <code>@CYP-123</code> instead of something like <code>@TestName:CYP-123</code>.</p> Environment variable <code>CUCUMBER_PREFIXES_TEST</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        prefixes: {\n            test: \"TestName:\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_PREFIXES_TEST=\"TestName:\"\n</code></pre>"},{"location":"section/configuration/cucumber/#uploadfeatures","title":"<code>uploadFeatures</code>","text":"<p>Set it to true to automatically create or update existing Xray issues (steps, labels, ...), based on the feature file executed by Cypress.</p> <p>Note</p> <p>Enable this option if the source of truth for test cases are local feature files in Cypress and Xray is only used for tracking execution status/history.</p> Environment variable <code>CUCUMBER_UPLOAD_FEATURES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        uploadFeatures: true\n    },\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_UPLOAD_FEATURES=true\n</code></pre>"},{"location":"section/configuration/http/","title":"HTTP","text":"<p>Sometimes it's necessary to configure HTTP communication if your Xray instance sits behind a proxy or uses special root certificates that are not available by default.</p> <p>Info</p> <p>The plugin uses <code>axios</code> for making requests. Please refer to the official documentation to see all available options.</p> <p>There are three ways to specify the plugin's HTTP configuration:</p> <ul> <li>common options to use for all HTTP requests</li> <li>options to use for Jira requests only</li> <li>options to use for Xray requests only</li> </ul> <p>The common options are automatically inherited by the Jira or Xray options, with the specific options overriding the common ones if repeated.</p> <p>Example</p> <p>The following example defines a maximum timeout of 5000 milliseconds for all HTTP requests:</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        timeout: 5000\n    }\n});\n</code></pre> <p>The following example defines:</p> <ul> <li>a default maximum timeout of 5000 milliseconds for all HTTP requests</li> <li>a maximum timeout of 30000 milliseconds for all HTTP requests directed at Jira</li> </ul> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        timeout: 5000,\n        jira: {\n            timeout: 30000\n        }\n    }\n});\n</code></pre> <p>The following example defines:</p> <ul> <li>a default maximum timeout of 5000 milliseconds for all HTTP requests</li> <li>a maximum timeout of 30000 milliseconds for all HTTP requests directed at Jira</li> <li>a proxy configuration for HTTP requests directed at Xray</li> </ul> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        timeout: 5000,\n        jira: {\n            timeout: 30000\n        },\n        xray: {\n            proxy: {\n                host: 'http://1.2.3.4',\n                port: 12345,\n                auth: {\n                    username: 'johndoe',\n                    password: 'supersecret'\n                }\n            }\n        }\n    }\n});\n</code></pre> <p>Info</p> <p>Mainly coming from an external dependency, HTTP options cannot be set via environment variables without additional configuration within the Cypress configuration file.</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        timeout: process.env.HTTP_TIMEOUT ?? 5000\n    }\n});\n</code></pre>"},{"location":"section/configuration/introduction/","title":"Introduction","text":"<p>Apart from authentication, all configuration takes place using the <code>configureXrayPlugin()</code> method in your cypress configuration file:</p> <pre><code>async setupNodeEvents(on, config) {\n    await configureXrayPlugin(on, config, {\n        jira: {\n            // ...\n        },\n        plugin: {\n            // ...\n        },\n        xray: {\n            // ...\n        },\n        cucumber: {\n            // ...\n        },\n        http: {\n            // ...\n        },\n    });\n}\n</code></pre> <p>Every option can also be set via environment variables: <pre><code>npx cypress run --env JIRA_PROJECT_KEY=\"PRJ\",\\\n                      JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\",\\\n                      XRAY_STATUS_PASSED=\"SUCCESS\"\n</code></pre> Alternatively (see Cypress documentation): <pre><code>CYPRESS_JIRA_PROJECT_KEY=\"PRJ\" \\\nCYPRESS_JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\" \\\nCYPRESS_XRAY_STATUS_PASSED=\"SUCCESS\" \\\nnpx cypress run\n</code></pre></p> <p>Note</p> <p>If you specify options in this method and provide their respective environment variables, the environment variable will take precedence over the option specified in the method.</p> <p>Tip</p> <p>Use <code>configureXrayPlugin()</code> to specify defaults when running and developing tests locally and environment variables in CI/CD setups to override these defaults.</p>"},{"location":"section/configuration/introduction/#separation-of-xray-and-jira","title":"Separation of Xray and Jira","text":"<p>You will probably wonder at some point why there's a split between Jira and Xray for some options, although they might be doing similar things, such as Jira's <code>attachVideos</code> and Xray's <code>uploadScreenshots</code>. The reason for this are the two different APIs which need to be worked with behind the scenes.</p> <p>On the one hand, there is the Xray API for dealing with tasks specific to Xray which don't exist in native Jira, such as test steps or screenshot evidence. On the other hand, there is the Jira API for tasks Jira handles natively, such as attaching files to arbitrary issues.</p> <p>An option's category is therefore simply determined by whichever API needs to be used to fulfill its tasks.</p> <p>Feedback</p> <p>Feel free to create an issue for options where you find the split confusing or unnecessary, so that potential clarifications can be discussed.</p>"},{"location":"section/configuration/jira/","title":"Jira","text":"<p>In order to access Xray, some Jira configuration is mandatory.</p>"},{"location":"section/configuration/jira/#mandatory-settings","title":"Mandatory settings","text":""},{"location":"section/configuration/jira/#projectkey","title":"<code>projectKey</code>","text":"<p>The key of the Jira project. This option is mandatory since otherwise Xray would not know which project to work with. It is used in many places throughout the plugin, for example for mapping Cypress tests to existing test issues in Xray.</p> Environment variable <code>JIRA_PROJECT_KEY</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        projectKey: \"PRJ\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_PROJECT_KEY=\"PRJ\"\n</code></pre>"},{"location":"section/configuration/jira/#url","title":"<code>url</code>","text":"<p>Use this parameter to specify the base URL of your Jira instance.</p> <p>For Jira cloud, it is usually of the form <code>https://your-domain.atlassian.net</code> (without the <code>/jira</code> part, see here).</p> <p>For Jira server, you can have a look here to determine your base URL.</p> Environment variable <code>JIRA_URL</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        url: \"https://example.org/development/jira\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_URL=\"https://example.org/development/jira\"\n</code></pre>"},{"location":"section/configuration/jira/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/jira/#attachvideos","title":"<code>attachVideos</code>","text":"<p>Whether any videos Cypress captured during test execution should be attached to the test execution issue on results upload.</p> <p>Note</p> <p>This option only takes effect once <code>uploadResults</code> is turned on. It is not possible to attach videos without uploading results.</p> Environment variable <code>JIRA_ATTACH_VIDEOS</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\n    jira: {\n        attachVideos: true\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_ATTACH_VIDEOS=true\n</code></pre>"},{"location":"section/configuration/jira/#fields","title":"<code>fields</code>","text":"<p>Jira Field IDs to make all fields required during the upload process uniquely identifiable. By default, the plugin accesses field information using the fields' names (ignoring case). Therefore, providing Jira field IDs can make sense in the following scenarios:</p> <ul> <li> <p>Your Jira language setting is a language other than English</p> <p>Example</p> <p>When the plugin tries to access the test environments of issues, it will look for a field with name <code>Test Environments</code> by default. However, if Jira is set to French for example, it will return a field called <code>Environnements de Test</code> instead.</p> <p>In these situations, the plugin will display an error message containing the fields it received and their IDs. The ID of field <code>Environnements de Test</code> could then be copied to the <code>testEnvironments</code> option, fixing the error in future uploads:</p> <pre><code>Failed to fetch Jira field ID for field with name: Test Environments\nMake sure the field actually exists and that your Jira language settings did not modify the field's name\n\nAvailable fields:\n  name: Environnements de Test, id: customfield_11805\n  name: Type de Test,           id: customfield_42069\n  ...\n</code></pre> </li> <li> <p>Your Jira project contains several fields with identical names</p> <p>Example</p> <p>Jira does not prohibit configuring multiple fields with the same name. There might be multiple fields called <code>Test Environments</code> for example, the default Xray one and another one for descriptions of defects reported by customers in user acceptance tests.</p> <p>In these situations, the plugin will display an error message containing the duplicates it detected and their properties, including the field IDs. The ID of Jira's test environments field could then again be copied to the <code>testEnvironments</code> option, fixing the error in future uploads:</p> <pre><code>Failed to fetch Jira field ID for field with name: Test Environments\nThere are multiple fields with this name\n\nDuplicates:\n  id: customfield_11805, name: Test Environments, clauseNames: Test Environments\n  id: customfield_12345, name: Test Environments, clauseNames: Test Environments (user acceptance)\n  ...\n</code></pre> </li> </ul> <p>Info</p> <p>Please consult the official documentation for more information about field IDs: https://confluence.atlassian.com/jirakb/how-to-find-id-for-custom-field-s-744522503.html</p>"},{"location":"section/configuration/jira/#description","title":"<code>description</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. Field <code>description</code> is a system field and will always have the ID <code>description</code>. It is no longer necessary to specify this field ID.</p> <p>The description field ID of Jira issues.</p> Environment variable <code>JIRA_FIELDS_DESCRIPTION</code> Type <code>string</code> Default <code>\"description\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        fields: {\n            description: \"Beschreibung\" // German\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_DESCRIPTION=Beschreibung\n</code></pre>"},{"location":"section/configuration/jira/#labels","title":"<code>labels</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. Field <code>labels</code> is a system field and will always have the ID <code>labels</code>. It is no longer necessary to specify this field ID.</p> <p>The labels field ID of Jira issues.</p> Environment variable <code>JIRA_FIELDS_LABELS</code> Type <code>string</code> Default <code>\"labels\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        fields: {\n            labels: \"Stichworte\" // German\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_LABELS=Stichworte\n</code></pre>"},{"location":"section/configuration/jira/#summary","title":"<code>summary</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. Field <code>summary</code> is a system field and will always have the ID <code>summary</code>. It is no longer necessary to specify this field ID.</p> <p>The summary field ID of Jira issues.</p> Environment variable <code>JIRA_FIELDS_SUMMARY</code> Type <code>string</code> Default <code>\"summary\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        fields: {\n            summary: \"Beschreibung\" // German\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_SUMMARY=Beschreibung\n</code></pre>"},{"location":"section/configuration/jira/#testenvironments","title":"<code>testEnvironments</code>","text":"<p>The Xray test environments field ID (i.e. the test environments associated with test execution issues).</p> <p>Note</p> <p>This option is required for server instances only. Xray cloud provides ways to retrieve test environment field information independently of Jira.</p> Environment variable <code>JIRA_FIELDS_TEST_ENVIRONMENTS</code> Type <code>string</code> Default <code>\"test environments\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        fields: {\n            testEnvironments: \"customfield_12345\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_TEST_ENVIRONMENTS=customfield_12345\n</code></pre>"},{"location":"section/configuration/jira/#testplan","title":"<code>testPlan</code>","text":"<p>The Jira field ID of test plans in Xray test (execution) issues.</p> <p>Note</p> <p>This option is necessary for server instances only. Xray cloud provides ways to retrieve test plan field information independently of Jira.</p> Environment variable <code>JIRA_FIELDS_TEST_PLAN</code> Type <code>string</code> Default <code>\"test plan\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        fields: {\n            testPlan: \"customfield_12345\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_TEST_PLAN=customfield_12345\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissue","title":"<code>testExecutionIssue</code>","text":"<p>This option can be used to configure the test execution issue that the plugin will either create or modify with the run results. The value must match the format of Jira's issue create/update payloads:</p> <ul> <li>Jira Cloud</li> <li>Jira Server</li> </ul> <p>Note</p> <p>Because the data here has to go through Xray first, it is possible that some fields that Jira normally is happy to accept will be rejected by Xray. For example, the assignee may need to be set using the <code>name</code> property instead of account IDs (see FAQ).</p> <p>You can do cool things here, including:</p> <ul> <li>setting assignees</li> <li>setting custom fields (any fields actually)</li> <li>performing issue transitions</li> <li>...</li> </ul> <p>Almost everything you can do when you create Jira issues using the Jira API, you can also do here. Make sure to check out the Jira API documentation for more information.</p> <p>Tip</p> <p>The plugin also accepts a function that allows you to specify dynamic values based on the Cypress results.</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: ({ results }) =&gt; {\n            if (results.totalFailed &gt; 0) {\n                return {\n                    fields: {\n                        summary: \"Failed test execution\"\n                    }\n                };\n            }\n            return {\n                fields: {\n                    summary: \"Perfect test execution\"\n                }\n            };\n        }\n    }\n});\n</code></pre> <p>Warning (affected versions: <code>7.2.0</code> \u2264 version &lt; <code>8.0.0</code>)</p> <p>While conflicting options such as <code>testExecutionIssueDescription</code> or <code>testExecutionIssueSummary</code> are still available, the fields and values defined in <code>testExecutionIssue</code> will take precedence over all options marked as deprecated. The following code configuration will create test executions with <code>Blue summary</code> and <code>Blue description</code> fields:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                summary: \"Blue summary\",\n                description: \"Blue description\"\n            }\n        },\n        testExecutionIssueSummary: \"Red summary\", // ignored\n        testExecutionIssueDescription: \"Red description\", // ignored\n    },\n});\n</code></pre> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE</code> Type <code>object</code> Default <code>undefined</code> <p>Example</p> Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            key: \"PRJ-16\",\n            fields: {\n                summary: \"My execution issue summary\",\n                description: \"My execution issue description\",\n                assignee: {\n                    name: \"cool.turtle@company.com\"\n                },\n                customfield_12345: \"Sprint 17\"\n            }\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE='{\"key\":\"PRJ-16\",\"fields\":{\"summary\":\"My execution issue summary\",\"description\":\"My execution issue description\",\"assignee\":{\"name\":\"cool.turtle@company.com\"},\"customfield_12345\":\"Sprint 17\"}}'\n</code></pre>"},{"location":"section/configuration/jira/#fields_1","title":"<code>fields</code>","text":"<p>These options modify the fields of the test execution issue that is either created or modified by each test run.</p>"},{"location":"section/configuration/jira/#description_1","title":"<code>description</code>","text":"<p>The description of test execution issues, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>key</code>).</p> <p>If the <code>key</code> is configured but <code>description</code> is omitted, the existing test execution issue's description will not be modified.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE</code> Type <code>string</code> Default <code>`Cypress version: ${version} Browser: ${name} (${version})`</code> with values depending on Cypress and the chosen browser Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                description: \"Release Test Results for v42.0\"\n            }\n        }\n    }\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE='{\"fields\":{\"description\":\"Release Test Results for v42.0\"}}'\n</code></pre>"},{"location":"section/configuration/jira/#issuetype","title":"<code>issuetype</code>","text":"<p>The issue type of test executions. By default, Xray calls them <code>Test Execution</code>, but it's possible that they have been renamed or translated in your Jira instance.</p> <p>Use this option to specify the type of the test executions the plugin should create for each run.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE</code> Type <code>string</code> Default <code>'Test Execution'</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                issuetype: {\n                    id: \"12345\",\n                    name: \"Xray Test Execution\",\n                    // ... more properties to uniquely identify the issue type\n                }\n            }\n        }\n    }\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE='{\"fields\":{\"issuetype\":{\"id\":\"12345\",\"name\":\"Xray Test Execution\"}}}'\n</code></pre>"},{"location":"section/configuration/jira/#summary_1","title":"<code>summary</code>","text":"<p>The summary of test execution issues, which will be used both for new test execution issues as well as for updating existing issues provided through <code>key</code>.</p> <p>If the <code>key</code> is configured but the <code>summary</code> is omitted, the existing test execution issue's summary will not be modified.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE</code> Type <code>string</code> Default <code>`Execution Results [${t}]`</code> with <code>t</code> being a Unix timestamp when Cypress started testing Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                summary: \"my summary\"\n            }\n        }\n    }\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE='{\"fields\":{\"summary\":\"my summary\"}}'\n</code></pre>"},{"location":"section/configuration/jira/#key","title":"<code>key</code>","text":"<p>The key of the test execution issue to attach the run results to. If omitted, Jira will always create a new test execution issue with each upload.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            key: \"PRJ-123\"\n        }\n    }\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE='{\"key\":\"PRJ-123\"}'\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuedescription","title":"<code>testExecutionIssueDescription</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. To define a description, please use <code>description</code> instead:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                description: \"my description\"\n            }\n        }\n    },\n});\n</code></pre> <p>The description of test execution issues, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>testExecutionIssueKey</code>).</p> <p>If the <code>testExecutionIssueKey</code> is configured but the <code>testExecutionIssueDescription</code> is omitted, the existing test execution issue's description will not be modified.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION</code> Type <code>string</code> Default <code>`Cypress version: ${version} Browser: ${name} (${version})`</code> with values depending on Cypress and the chosen browser Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssueDescription: \"This test run was approved by Mr Anderson.\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION=\"This test run was approved by Mr Anderson.\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuekey","title":"<code>testExecutionIssueKey</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. To reuse a test execution issue, please use <code>key</code> instead:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            key: \"PRJ-123\"\n        }\n    },\n});\n</code></pre> <p>The key of the test execution issue to attach the run results to. If omitted, Jira will always create a new test execution issue with each upload.</p> <p>Note</p> <p>Must be prefixed with the project key.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_KEY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssueKey: \"PRJ-123\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuesummary","title":"<code>testExecutionIssueSummary</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. To define a summary, please use <code>summary</code> instead:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                summary: \"my summary\"\n            }\n        }\n    },\n});\n</code></pre> <p>The summary of test execution issues, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>testExecutionIssueKey</code>).</p> <p>If the <code>testExecutionIssueKey</code> is configured but the <code>testExecutionIssueSummary</code> is omitted, the existing test execution issue's summary will not be modified.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_SUMMARY</code> Type <code>string</code> Default <code>`Execution Results [${t}]`</code> with <code>t</code> being a Unix timestamp when Cypress started testing Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssueSummary: \"Monday morning regression test\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_SUMMARY=\"Monday morning regression test\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuetype","title":"<code>testExecutionIssueType</code>","text":"<p>Deprecated since <code>7.2.0</code></p> <p>Will be removed in version <code>8.0.0</code>. To define a test execution issue type, please use <code>issuetype</code> instead:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                issuetype: {\n                    // whatever is necessary to uniquely identify the issue type, e.g:\n                    name: \"Xray Test Execution\",\n                    id: \"12345\"\n                }\n            }\n        }\n    },\n});\n</code></pre> <p>The issue type name of test executions. By default, Xray calls them <code>Test Execution</code>, but it's possible that they have been renamed or translated in your Jira instance.</p> <p>Use this option to specify the type of the test executions the plugin should create for each run (if needed, see here).</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_TYPE</code> Type <code>string</code> Default <code>Test Execution</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssueType: \"Test Run\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_TYPE=\"Test Run\"\n</code></pre>"},{"location":"section/configuration/jira/#testplanissuekey","title":"<code>testPlanIssueKey</code>","text":"<p>A test plan issue to attach the execution to.</p> Environment variable <code>JIRA_TEST_PLAN_ISSUE_KEY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testPlanIssueKey: \"PRJ-456\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_PLAN_ISSUE_KEY=\"PRJ-456\"\n</code></pre>"},{"location":"section/configuration/jira/#testplanissuetype","title":"<code>testPlanIssueType</code>","text":"<p>Deprecated since <code>7.4.0</code></p> <p>Will be removed in version <code>8.0.0</code>. Unused.</p> <p>The issue type name of test plans. By default, Xray calls them <code>Test Plan</code>, but it's possible that they have been renamed or translated in your Jira instance.</p> <p>Note</p> <p>You can ignore this setting if:</p> <ul> <li>you're using Xray cloud or</li> <li>you're not running any Cucumber tests</li> </ul> <p>The plugin only accesses this option when:</p> <ul> <li>you're using Xray server and</li> <li>you're running Cucumber tests and</li> <li>a test plan issue key has been specified and it's trying to attach the test execution to it</li> </ul> Environment variable <code>JIRA_TEST_PLAN_ISSUE_TYPE</code> Type <code>string</code> Default <code>Test Plan</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testPlanIssueType: \"Plan de test\" // \ud83c\uddeb\ud83c\uddf7\n    },\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_PLAN_ISSUE_TYPE=\"Plan de test\"\n</code></pre>"},{"location":"section/configuration/plugin/","title":"Plugin","text":"<p>The plugin offers several options for customizing the upload further.</p>"},{"location":"section/configuration/plugin/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/plugin/#debug","title":"<code>debug</code>","text":"<p>Turns on or off extensive debugging output.</p> Environment variable <code>PLUGIN_DEBUG</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    plugin: {\n        debug: true\n    },\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_DEBUG=true\n</code></pre>"},{"location":"section/configuration/plugin/#enabled","title":"<code>enabled</code>","text":"<p>Enables or disables the entire plugin. Setting this option to <code>false</code> disables all plugin functions, including authentication checks, uploads or feature file synchronization.</p> Environment variable <code>PLUGIN_ENABLED</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    plugin: {\n        enabled: false\n    },\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_ENABLED=false\n</code></pre>"},{"location":"section/configuration/plugin/#logdirectory","title":"<code>logDirectory</code>","text":"<p>The directory which all error and debug log files will be written to.</p> Environment variable <code>PLUGIN_LOG_DIRECTORY</code> Type <code>string</code> Default <code>\"logs\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    plugin: {\n        logDirectory: \"/home/logs\"\n    },\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_LOG_DIRECTORY=\"/home/logs\"\n</code></pre>"},{"location":"section/configuration/plugin/#normalizescreenshotnames","title":"<code>normalizeScreenshotNames</code>","text":"<p>Some Xray setups might struggle with uploaded evidence if the filenames contain non-ASCII characters. With this option enabled, the plugin only keeps characters <code>a-zA-Z0-9.</code> in screenshot names and replaces all other sequences with <code>_</code>.</p> Environment variable <code>PLUGIN_NORMALIZE_SCREENSHOT_NAMES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    plugin: {\n        normalizeScreenshotNames: true\n    },\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_NORMALIZE_SCREENSHOT_NAMES=true\n</code></pre>"},{"location":"section/configuration/types/","title":"Option types","text":"<p>Below you will find accepted values of custom option types you can use when providing values to options through environment variables.</p>"},{"location":"section/configuration/types/#boolean","title":"<code>boolean</code>","text":"Accepted values <ul> <li><code>true</code> <code>1</code> <code>yes</code> <code>y</code> <code>on</code></li> </ul> <ul> <li><code>false</code> <code>0</code> <code>no</code> <code>n</code> <code>off</code></li> </ul> <p>Example</p> <pre><code>npx cypress run --env XRAY_UPLOAD_RESULTS=yes\n</code></pre>"},{"location":"section/configuration/types/#string","title":"<code>string[]</code>","text":"Accepted values A JSON parseable list of strings. <p>Info</p> <p>Parsing is done by Cypress, so it's difficult to actually describe the parsing rules it applies. The most important rules seem to be:</p> <ul> <li>add quotes if your string contains whitespace</li> <li>add quotes if your string contains a comma</li> <li>no whitespace outside quotes</li> </ul> <p>Example</p> <pre><code>npx cypress run --env XRAY_TEST_ENVIRONMENTS=[DEV,\"Cool Test Environment\",2.3]\n</code></pre>"},{"location":"section/configuration/types/#object","title":"<code>object</code>","text":"Accepted values A JSON parseable object. <p>Info</p> <p>Parsing is done by Cypress, so it's difficult to actually describe the parsing rules it applies. The most important rules seem to be:</p> <ul> <li>add quotes if your string contains whitespace</li> <li>add quotes if your string contains a comma</li> <li>no whitespace outside quotes</li> </ul> <p>Example</p> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION='{\"fields\":{\"summary\":\"My execution!\"}}'\n</code></pre>"},{"location":"section/configuration/xray/","title":"Xray","text":"<p>You can provide a bunch of Xray settings which might become necessary depending on your project configuration.</p>"},{"location":"section/configuration/xray/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/xray/#status","title":"<code>status</code>","text":"<p>These status options represent the mapping of Cypress statuses to corresponding Xray test statuses. If you have custom test statuses set up in Xray, you should specify their names here.</p> Xray serverXray cloud <p></p> <p></p> <p>Info</p> <p>For more information on test statuses, please refer to the official documentation:</p> <ul> <li>Xray server: https://docs.getxray.app/display/XRAY/Manage+Test+Statuses</li> <li>Xray cloud: https://docs.getxray.app/display/XRAYCLOUD/Global+Settings%3A+Test+Statuses</li> </ul>"},{"location":"section/configuration/xray/#aggregate","title":"<code>aggregate</code>","text":"<p>A function that returns a single Xray status for a given combination of Cypress statuses. It is used to determine the final status of retried and data-driven tests and is never called for tests that have only been run once.</p> <p>Info</p> <p>Tests are grouped by the issue keys present in their <code>describe()</code> and <code>it()</code> titles as described here.</p> Type <code>function</code> <p>Default <pre><code>({ failed, passed, pending, skipped }) =&gt; {\n    if (passed &gt; 0 &amp;&amp; failed === 0 &amp;&amp; skipped === 0) {\n        // return Xray status for passed Cypress status\n    }\n    if (passed === 0 &amp;&amp; failed === 0 &amp;&amp; skipped === 0 &amp;&amp; pending &gt; 0) {\n        // return Xray status for pending Cypress status\n    }\n    if (skipped &gt; 0) {\n        // return Xray status for skipped Cypress status\n    }\n    // return Xray status for failed Cypress status\n}\n</code></pre></p> Example <p>The following example defines custom <code>FLAKY</code> and <code>ABORTED</code> statuses for iterated tests:</p> <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            aggregate: ({ failed, passed, pending, skipped }) =&gt; {\n                if (passed &gt; 0 &amp;&amp; failed === 0 &amp;&amp; skipped === 0) {\n                    return \"PASSED\";\n                }\n                if (passed === 0 &amp;&amp; failed === 0 &amp;&amp; skipped === 0 &amp;&amp; pending &gt; 0) {\n                    return \"FLAKY\";\n                }\n                if (skipped &gt; 0) {\n                    return \"ABORTED\";\n                }\n                return \"FAILED\";\n            },\n        },\n    },\n});\n</code></pre>"},{"location":"section/configuration/xray/#failed","title":"<code>failed</code>","text":"<p>The Xray status name of a test marked as failed by Cypress.</p> Environment variable <code>XRAY_STATUS_FAILED</code> Type <code>string</code> Default <code>\"FAIL\"</code> (when providing Xray server credentials) <code>\"FAILED\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            failed: \"FAILURE\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_FAILED=FAILURE\n</code></pre>"},{"location":"section/configuration/xray/#passed","title":"<code>passed</code>","text":"<p>The Xray status name of a test marked as passed by Cypress.</p> Environment variable <code>XRAY_STATUS_PASSED</code> Type <code>string</code> Default <code>\"PASS\"</code> (when providing Xray server credentials) <code>\"PASSED\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            passed: \"SUCCESS\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_PASSED=SUCCESS\n</code></pre>"},{"location":"section/configuration/xray/#pending","title":"<code>pending</code>","text":"<p>The Xray status name of a test marked as pending by Cypress.</p> Environment variable <code>XRAY_STATUS_PENDING</code> Type <code>string</code> Default <code>\"TODO\"</code> (when providing Xray server credentials) <code>\"TO DO\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            pending: \"AWAITING EXECUTION\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_PENDING=\"AWAITING EXECUTION\"\n</code></pre>"},{"location":"section/configuration/xray/#skipped","title":"<code>skipped</code>","text":"<p>The Xray status name of a test marked as skipped by Cypress.</p> Environment variable <code>XRAY_STATUS_SKIPPED</code> Type <code>string</code> Default <code>\"FAIL\"</code> (when providing Xray server credentials) <p><code>\"FAILED\"</code> (when providing Xray cloud credentials)</p> <p>Note</p> <p>Defaults to <code>\"FAILED\"</code> because Cypress only skips test cases if errors occur, as described here.</p> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            skipped: \"IGNORED\"\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_SKIPPED=\"IGNORED\"\n</code></pre>"},{"location":"section/configuration/xray/#step","title":"<code>step</code>","text":"<p>These status options represent the mapping of step statuses to corresponding Xray step statuses. If you have custom statuses set up in Xray, you should specify their names here.</p> Xray serverXray cloud <p></p> <p></p> <p>Info</p> <p>For more information on test step statuses, please refer to the official documentation:</p> <ul> <li>Xray server: https://docs.getxray.app/display/XRAY/Manage+Test+Step+Statuses</li> <li>Xray cloud: https://docs.getxray.app/display/XRAYCLOUD/Global+Settings%3A+Test+Step+Statuses</li> </ul> <p>Note</p> <p>These are currently only accessed in Cucumber report conversion. If you're not using Cucumber in your project, you can safely ignore them.</p>"},{"location":"section/configuration/xray/#failed_1","title":"<code>failed</code>","text":"<p>The Xray status name of a step marked as failed.</p> Environment variable <code>XRAY_STATUS_STEP_FAILED</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            step: {\n                failed: \"FAILURE\"\n            }\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_STEP_FAILED=FAILURE\n</code></pre>"},{"location":"section/configuration/xray/#passed_1","title":"<code>passed</code>","text":"<p>The Xray status name of a step marked as passed.</p> Environment variable <code>XRAY_STATUS_STEP_PASSED</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            step {\n                passed: \"SUCCESS\"\n            }\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_STEP_PASSED=SUCCESS\n</code></pre>"},{"location":"section/configuration/xray/#pending_1","title":"<code>pending</code>","text":"<p>The Xray status name of a step marked as pending.</p> Environment variable <code>XRAY_STATUS_STEP_PENDING</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            step: {\n                pending: \"AWAITING EXECUTION\"\n            }\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_STEP_PENDING=\"AWAITING EXECUTION\"\n</code></pre>"},{"location":"section/configuration/xray/#skipped_1","title":"<code>skipped</code>","text":"<p>The Xray status name of a step marked as skipped.</p> Environment variable <code>XRAY_STATUS_STEP_SKIPPED</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        status: {\n            step: {\n                skipped: \"IGNORED\"\n            }\n        }\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_STEP_SKIPPED=IGNORED\n</code></pre>"},{"location":"section/configuration/xray/#testenvironments","title":"<code>testEnvironments</code>","text":"<p>The test environments for test execution issues. These will be used as follows:</p> <ul> <li>if the plugin creates new test execution issues, they will be associated with the issue</li> <li>if the plugin reuses existing test execution issues, they will either:<ul> <li>replace existing test environments</li> <li>be added if the issue does not yet have any test environments associated</li> </ul> </li> </ul> <p>Note</p> <p>Xray's API only allows replacing test environments in the plugin's scope. It is not possible to completely remove all existing test environments during result upload. Completely removing all existing environments needs to be done manually.</p> <p>This means that you will always need to specify one or more test environments to replace all existing ones, or leave them as is by omitting the option entirely.</p> <p>For more information about working with test environments, make sure to check out the documentation for Xray server or Xray cloud.</p> Environment variable <code>XRAY_TEST_ENVIRONMENTS</code> Type <code>string[]</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        testEnvironments: [\"DEV\", \"v3.1\"]\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_TEST_ENVIRONMENTS=[DEV,v3.1]\n</code></pre>"},{"location":"section/configuration/xray/#uploadrequests","title":"<code>uploadRequests</code>","text":"<p>Enables or disables the upload of manually executed requests using <code>cy.request</code>. If <code>true</code>, requests and responses will be attached to the corresponding test as evidence. If <code>false</code> or left <code>undefined</code>, neither requests nor responses are attached.</p> <p>Note</p> <p>For this option to work properly, you need to overwrite the <code>cy.request</code> command.</p> Environment variable <code>XRAY_UPLOAD_REQUESTS</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        uploadRequests: true\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_REQUESTS=true\n</code></pre>"},{"location":"section/configuration/xray/#uploadresults","title":"<code>uploadResults</code>","text":"<p>Turns execution results upload on or off. Useful when switching upload on or off from the command line (via environment variables).</p> Environment variable <code>XRAY_UPLOAD_RESULTS</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        uploadResults: false\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_RESULTS=false\n</code></pre>"},{"location":"section/configuration/xray/#uploadscreenshots","title":"<code>uploadScreenshots</code>","text":"<p>Turns on or off the upload of screenshots Cypress takes during test execution.</p> <p>Note</p> <p>This option only takes effect once <code>uploadResults</code> is turned on. It is not possible to upload screenshots without uploading results.</p> Environment variable <code>XRAY_UPLOAD_SCREENSHOTS</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(on, config, {\n    xray: {\n        uploadScreenshots: false\n    },\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_SCREENSHOTS_=false\n</code></pre>"},{"location":"section/guides/faq/","title":"FAQ","text":"<p>Here is a list of common concerns or issues and how to deal with them.</p>"},{"location":"section/guides/faq/#trusting-custom-root-cas","title":"Trusting custom root CAs","text":"<p>In case an Xray instance is set up on an internal network with custom CA certificates, you will need to download these certificates and provide them to the Xray plugin.</p> <p>Error messages requiring you to provide custom SSL certificates may look like any of the following:</p> <p>Error: unable to get issuer certificate</p> <p>Error: unable to verify the first certificate</p> <p>Solution</p> <p>Download the SSL certificate of your CA and make sure it is in <code>.pem</code> format. Then, tell the plugin to trust that CA by providing the certificate's path in the HTTP options:</p> <pre><code>import { Agent } from \"node:https\";\n\nawait configureXrayPlugin(on, config, {\n    http: {\n        httpsAgent: new Agent({\n            ca: \"/home/cert.pem\",\n        }),\n    },\n});\n</code></pre>"},{"location":"section/guides/faq/#providing-security-options","title":"Providing security options","text":"<p>Some web servers may be running outdated or legacy code, including the one on which your Xray instance is be installed. Modern HTTP clients usually reject communication attempts to communicate with such servers for security reasons. However, clients can be instructed to allow insecure communcation by setting appropriate flags.</p> <p>Error messages that require you to provide security options may look like any of the following:</p> <p>Error: unsafe legacy renegotiation disabled</p> <p>Solution</p> <p>Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers:</p> <pre><code>import { constants } from \"node:crypto\";\nimport { Agent } from \"node:https\";\n\nawait configureXrayPlugin(on, config, {\n    http: {\n        httpsAgent: new Agent({\n            secureOptions: constants.SSL_OP_LEGACY_SERVER_CONNECT,\n        }),\n    },\n});\n</code></pre>"},{"location":"section/guides/faq/#configuring-a-proxy","title":"Configuring a proxy","text":"<p>Depending on your network infrastructure, you may need to configure proxy servers for the web requests that the plugin makes.</p> <p>Error messages that require you to configure proxies may look like any of the following:</p> <p>Error: Request failed with status code 502</p> <p>Solution</p> <p>You can configure a single proxy for all requests:</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        proxy: {\n            host: 'http://1.2.3.4',\n            port: 12345,\n            auth: {\n                username: 'johndoe',\n                password: 'supersecret'\n            }\n        }\n    },\n});\n</code></pre> <p>You can configure a proxy for Jira only (and similarly for Xray):</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        jira: {\n            proxy: {\n                host: 'http://1.2.3.4',\n                port: 12345,\n                auth: {\n                    username: 'johndoe',\n                    password: 'supersecret'\n                }\n            }\n        }\n    },\n});\n</code></pre> <p>You can also define different proxies for Jira and Xray:</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        jira: {\n            proxy: {\n                host: 'http://1.2.3.4',\n                port: 12345,\n                auth: {\n                    username: 'johndoe',\n                    password: 'supersecret'\n                }\n            }\n        },\n        xray: {\n            proxy: {\n                host: 'http://9.8.7.6',\n                port: 98765,\n                auth: {\n                    username: 'johndoeAdmin',\n                    password: 'supersecretButAdmin'\n                }\n            }\n        }\n    },\n});\n</code></pre>"},{"location":"section/guides/faq/#assigning-issues","title":"Assigning issues","text":"<p>The way issues can be assigned may vary depending on your Jira version. Typically, Jira Cloud requires the assignee's account ID, whereas Jira Server requires the username (used to log in) instead.</p> <p>The easiest way to retrieve this information is to find an existing issue where the desired assignee already appears somewhere in the fields (reporter, assignee) and then to export the issue to XML. You can then search the XML document for the desired person, which will usually appear in an HTML element.</p> <p>Jira Server</p> <p>Assuming that the XML export contains the following line...</p> <pre><code>&lt;reporter username=\"jane.doe\"&gt;Jane Doe&lt;/reporter&gt;\n</code></pre> <p>... you may need to assign your test execution issues as follows:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                assignee: {\n                    name: 'jane.doe'\n                }\n            }\n        }\n    },\n});\n</code></pre> <p>Jira Cloud</p> <p>Assuming that the XML export contains the following line...</p> <pre><code>&lt;reporter accountid=\"12345:4762614f-a4ea-42ad-ae93-e094702190d6\"&gt;Jane Doe&lt;/reporter&gt;\n</code></pre> <p>... you may need to assign your test execution issues as follows:</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                assignee: {\n                    accountId: '12345:4762614f-a4ea-42ad-ae93-e094702190d6'\n                }\n            }\n        }\n    },\n});\n</code></pre> <p>Error assembling issue data: expected Object containing a <code>name</code> property</p> <p>Solution</p> <p>Instead of assigning issues using the assignee's Jira ID or email address, you'll need to use their username instead (which they e.g. use to log in):</p> <pre><code>await configureXrayPlugin(on, config, {\n    jira: {\n        testExecutionIssue: {\n            fields: {\n                assignee: {\n                    name: 'username'\n                }\n            }\n        }\n    },\n});\n</code></pre>"},{"location":"section/guides/faq/#rate-limiting","title":"Rate limiting","text":"<p>Jira Cloud and Xray Cloud use rate limiting in their APIs. If you're using Jira/Xray Server, your local server instance may also be rate limiting network requests. This can be a problem for larger projects, as the plugin processes as much concurrently as possible. For example, Cucumber feature files are all imported at the same time, as their imports do not affect each other.</p> <p>Request failed with status code 429</p> <p>Success</p> <p>An easy way to avoid hitting API rate limits is to set a maximum number of requests per second.</p> <p>The following configuration ensures that all requests (regardless of which API they are targeting) are sent every 200ms.</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        rateLimiting: {\n            requestsPerSecond: 5\n        }\n    },\n});\n</code></pre> <p>The following configuration ensures that Jira requests are sent every 200ms, while Xray requests are sent once per second.</p> <pre><code>await configureXrayPlugin(on, config, {\n    http: {\n        jira: {\n            rateLimiting: {\n                requestsPerSecond: 5\n            }\n        },\n        xray: {\n            rateLimiting: {\n                requestsPerSecond: 1\n            }\n        }\n    },\n});\n</code></pre>"},{"location":"section/guides/featureFileSynchronization/","title":"Feature file synchronization","text":"<p>The plugin allows you to keep your local feature files in sync with the step definitions in Xray.</p>"},{"location":"section/guides/featureFileSynchronization/#feature-file-upload","title":"Feature file upload","text":"Synchronize step definitions in Xray based on your local feature files. <p>Uploading feature files is useful if the source of truth for test cases are local feature files in Cypress and Xray is only used for tracking execution results. You can enable the upload using the <code>uploadFeatures</code> setting and by making sure that feature file synchronization is enabled.</p> <p>Tip</p> <p>Don't forget to add tags to your backgrounds, scenarios and scenario outlines. Uploads of untagged feature files will always be skipped as a precautionary measure.</p> Example <p>In the following scenario, the existing example will be extended by an additional step.</p> demo.spec.featuredemo.spec.jscypress.config.jsVideo <pre><code>Feature: Example page redirection\n\n    @TestName:CYP-129\n    Scenario: Redirect by clicking\n        Given the example page\n        When the link is clicked\n        Then a redirect should occur\n        And the test should fail\n</code></pre> <pre><code>import { Given, Then, When } from \"@badeball/cypress-cucumber-preprocessor\";\n\nGiven(\"the example page\", function () {\n    cy.visit(\"https://example.org\");\n});\n\nWhen(\"the link is clicked\", function () {\n    // Intercept the click, since it unfortunately redirects to a http:// location\n    // and causes Cypress to abort the execution.\n    cy.intercept(\"GET\", \"https://www.iana.org/domains/example\", (request) =&gt; {\n        request.reply(\"link was clicked\");\n    }).as(\"redirect\");\n    cy.get(\"a\").click();\n});\n\nThen(\"a redirect should occur\", function () {\n    cy.wait(\"@redirect\").then((request) =&gt; {\n        expect(request.response.body).to.eq(\"link was clicked\");\n    });\n});\n\nThen(\"the test should fail\", function () {\n    expect(true).to.be.false;\n});\n</code></pre> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin\";\nimport fix from \"cypress-on-fix\";\n\n// ...\nasync setupNodeEvents(on, config) {\n    const fixedOn = fix(on);\n    await addCucumberPreprocessorPlugin(fixedOn, config);\n    await configureXrayPlugin(\n        fixedOn,\n        config,\n        {\n            jira: {\n                projectKey: \"CYP\",\n                url: \"https://example.atlassian.net\"\n            }\n            cucumber: {\n                featureFileExtension: \".feature\",\n                uploadFeatures: true\n            }\n        }\n    );\n    fixedOn(\"file:preprocessor\", async (file) =&gt; {\n        await syncFeatureFile(file);\n        const cucumberPlugin = createBundler({\n            plugins: [createEsbuildPlugin(config)],\n        });\n        return cucumberPlugin(file);\n    });\n    return config;\n}\n// ...\n</code></pre> <p>Please note the the steps and the issue's summary changing due to the feature import.</p> <p>      Your browser does not support the video tag. </p>"},{"location":"section/guides/featureFileSynchronization/#language-support","title":"Language support","text":"<p>By default, Xray expects feature files to use English keywords. If you want to use different languages, make sure to add the corresponding <code># language:</code> header to your feature files, as described here.</p> <p>Example</p> <pre><code># language: de\nFunktionalit\u00e4t: Weiterleitung Beispielseite\n\n    @TestName:CYP-129\n    Szenario: Weiterleitung durch Klick\n        Angenommen Beispielseite\n        Wenn Klick auf Link\n        Dann Weiterleitung findet statt\n</code></pre>"},{"location":"section/guides/featureFileSynchronization/#feature-file-download","title":"Feature file download","text":"<p>Development</p> <p>Synchronization of local feature files based on the step definitions as managed in Xray is planned as a future feature (i.e. download of Xray step definitions to local feature files and then running them).</p>"},{"location":"section/guides/targetingExistingIssues/","title":"Targeting existing issues","text":"<p>The plugin does not upload any results unless you reuse existing Jira issues to not clutter up your projects with unnecessary test case (or test execution) issues. This section teaches you everything you need to know to target such existing issues.</p>"},{"location":"section/guides/targetingExistingIssues/#reuse-cypress-issues","title":"Reuse Cypress issues","text":"<p>To link Cypress tests to Jira issues, simply add the test case issue's key anywhere in their <code>describe()</code> \u2013 <code>it()</code> title chain (or corresponding alternatives like <code>specify()</code>):</p> <pre><code>describe(\"a suite\", () =&gt; {\n    it(\"PRJ-123 has a test case\", () =&gt; {\n        // ...\n    });\n});\n\ndescribe(\"PRJ-456 data-driven suite\", () =&gt; {\n    it(\"alice\", () =&gt; { /* ... */ });\n    it(\"bob\", () =&gt; { /* ... */ });\n    it(\"charlie who will also be reported as PRJ-789\", () =&gt; { /* ... */ });\n});\n</code></pre> <p>  The plugin parses all test case names and looks for sequences of the form <code>&lt;projectKey&gt;-&lt;number&gt;</code>, with <code>&lt;projectKey&gt;</code> being the configured project key and <code>&lt;number&gt;</code> the issue number.</p>"},{"location":"section/guides/targetingExistingIssues/#reuse-cucumber-issues","title":"Reuse Cucumber issues","text":"<p>To link your Cucumber feature files to existing Jira issues, you need to tag both scenario (outlines) and backgrounds. The tagging schemes follow the schemes Xray expects when importing feature files (see here or here).</p>"},{"location":"section/guides/targetingExistingIssues/#test-issues","title":"Test issues","text":"<p>In feature files, you must annotate scenarios (or scenario outlines) with a tag containing the corresponding test case issue key. The tag's prefix must match the one configured in your Xray settings (see here) and contain the project key.</p> Feature (prefix)cypress.config.js (prefix)Feature (no prefix)cypress.config.js (no prefix) <pre><code>Feature: Example page redirection\n\n@MyTestPrefix:CYP-129\nScenario: Redirect by clicking\n    Given the example page\n    When the link is clicked\n    Then a redirect should occur\n</code></pre> <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        prefixes: {\n            test: \"MyTestPrefix:\"\n        }\n    },\n});\n</code></pre> <pre><code>Feature: Example page redirection\n\n@CYP-129\nScenario: Redirect by clicking\n    Given the example page\n    When the link is clicked\n    Then a redirect should occur\n</code></pre> <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        prefixes: {\n            test: undefined // or omit it entirely\n        }\n    },\n});\n</code></pre>"},{"location":"section/guides/targetingExistingIssues/#precondition-issues","title":"Precondition issues","text":"<p>In feature files, you must add a comment to a background's very first step containing the tag for a corresponding precondition issue key. The tag's prefix must match the one configured in your Xray settings (see here) and contain the project key.</p> <p>Note</p> <p>You can find more information about preconditions here for Xray server and here for Xray cloud.</p> Feature (prefix)cypress.config.js (prefix)Feature (no prefix)cypress.config.js (no prefix) <pre><code>Feature: Big feature on lovely page\n\nBackground:\n    #@MyPreconditionPrefix:CYP-332\n    Given a browser\n    Then the lovely page should open\n</code></pre> <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        prefixes: {\n            precondition: \"MyPreconditionPrefix:\"\n        }\n    },\n});\n</code></pre> <pre><code>Feature: Big feature on lovely page\n\nBackground:\n    #CYP-332\n    Given a browser\n    Then the lovely page should open\n</code></pre> <pre><code>await configureXrayPlugin(on, config, {\n    cucumber: {\n        prefixes: {\n            precondition: undefined // or omit it entirely\n        }\n    },\n});\n</code></pre>"},{"location":"section/guides/targetingExistingIssues/#reuse-test-execution-issues","title":"Reuse test execution issues","text":"<p>By default, the plugin will always create a new test execution issue whenever you upload test results.</p> <p>You can prevent that from happening by specifying the test execution issue key you want to attach the results to.</p>"},{"location":"section/guides/uploadRequestData/","title":"Upload request data","text":"<p>The plugin is able to record web requests executed by <code>cy.request</code> which can then be added as execution evidence to the test execution issue during the results upload.</p> <p></p>"},{"location":"section/guides/uploadRequestData/#setup","title":"Setup","text":"<p>To upload your web requests and responses to Xray, you need to allow the plugin to overwrite the existing <code>cy.request</code> command in your support file and enable the upload in its configuration:</p> commands.jscypress.config.js <pre><code>import \"cypress-xray-plugin/commands\";\n</code></pre> <p>For details see <code>uploadRequests</code>.</p> <pre><code>import { configureXrayPlugin } from \"cypress-xray-plugin\";\n\nasync setupNodeEvents(on, config) {\n    await configureXrayPlugin(on, config, {\n        // ...\n        xray: {\n            uploadRequests: true\n        }\n    });\n}\n</code></pre> <p>By default, requests and responses are uploaded as JSON data with the following naming scheme:</p> type scheme request <code>&lt;method&gt; &lt;url&gt; &lt;timestamp&gt; request.json</code> response <code>&lt;method&gt; &lt;url&gt; &lt;timestamp&gt; response.json</code> <p>Note</p> <p>The plugin will only upload requests and responses as JSON evidence for tests that are associated with existing test issues.</p> <p>But I have already had to overwrite <code>cy.request</code> for other purposes?</p> <p>The plugin also exports its task queue so that you can invoke it manually, rather than letting the single import override all existing <code>cy.request</code> behaviour. This also allows for customisation of evidence file names.</p> commands.jscypress.config.js <pre><code>import { enqueueTask, PluginTask } from \"cypress-xray-plugin/commands/tasks\";\n\nCypress.Commands.overwrite(\"request\", (originalFn, request) =&gt; {\n    return enqueueTask(PluginTask.OUTGOING_REQUEST, \"my-request.json\", request)\n        .then((request) =&gt; {\n            // Do something with the request...\n            console.log(request);\n            return request;\n        })\n        .then(originalFn)\n        .then((response) =&gt; {\n            // Do something with the response...\n            console.log(response);\n            return enqueueTask(PluginTask.INCOMING_RESPONSE, \"my-response.json\", response);\n        });\n});\n</code></pre> <p>You can also choose to only upload responses if you wish:</p> <pre><code>import { enqueueTask, PluginTask } from \"cypress-xray-plugin/commands/tasks\";\n\nCypress.Commands.overwrite(\"request\", (originalFn, request) =&gt; {\n    return originalFn(request)\n        .then((response) =&gt; {\n            return enqueueTask(PluginTask.INCOMING_RESPONSE, \"my-response.json\", response);\n        });\n});\n</code></pre> <p>For details see <code>uploadRequests</code>.</p> <pre><code>import { configureXrayPlugin } from \"cypress-xray-plugin\";\n\nasync setupNodeEvents(on, config) {\n    await configureXrayPlugin(on, config, {\n        // ...\n        xray: {\n            uploadRequests: true\n        }\n    });\n}\n</code></pre>"},{"location":"section/guides/uploadTestResults/","title":"Upload test results","text":"The plugin allows you to upload Cypress test results to Xray server or Xray cloud."},{"location":"section/guides/uploadTestResults/#setup","title":"Setup","text":"<p>To upload your test results to Xray, make sure you have enabled the results upload in your configuration file:</p> <pre><code>import { configureXrayPlugin } from \"cypress-xray-plugin\";\n\nasync setupNodeEvents(on, config) {\n    await configureXrayPlugin(on, config, {\n        xray: {\n            uploadResults: true\n        }\n    });\n}\n</code></pre> <p>Afterwards, simply run Cypress:</p> <pre><code>npx cypress run\n</code></pre> <p>Note</p> <p>Don't forget to provide your authentication credentials.</p>"},{"location":"section/guides/uploadTestResults/#how-it-works","title":"How it works","text":"<p>The plugin will only upload results for tests you have linked to existing test issues.</p> <p>The plugin will also create a new test execution issue, unless you tell it to reuse a specific test execution issue.</p> Xray Documentation <p>You can find more information on the mechanisms and constraints regarding imports of test execution results here for Xray server and here for Xray cloud.</p>"},{"location":"section/guides/uploadTestResults/#uploading-cypress-test-results","title":"Uploading Cypress test results","text":"<p>The following example consists of three test cases for https://example.org:</p> <ol> <li> The first one tries to find an <code>&lt;h1&gt;</code> element with text <code>Example Domain</code>.</li> <li> The second one asserts that the page contains an <code>&lt;a&gt;</code> element with a <code>href</code> attribute.</li> <li> The third one tries to find an <code>&lt;img&gt;</code> element, which does not exist on the page.</li> </ol> <p>When uploading the results, the plugin will create a test execution issue containing the three executed test issues. Since Cypress automatically takes screenshots on failure, the execution will also contain the screenshot as evidence for the failed test case.</p> <p>A corresponding video can be seen here.</p> demo.spec.cy.jscypress.config.js <pre><code>describe(\"the upload demo\", () =&gt; {\n\n    beforeEach(() =&gt; {\n        cy.visit(\"https://example.org\");\n    });\n\n    it(\"CYP-410 Contains a title\", () =&gt; {\n        cy.get(\"h1\").should(\"contain.text\", \"Example Domain\");\n    });\n\n    it(\"CYP-411 Contains a link\", () =&gt; {\n        cy.get(\"a\").should(\"have.attr\", \"href\");\n    });\n\n    it(\"CYP-412 Fails a test\", () =&gt; {\n        cy.get(\"img\").should(\"be.visible\");\n    });\n\n})\n</code></pre> <pre><code>import { configureXrayPlugin } from \"cypress-xray-plugin\";\n\nasync setupNodeEvents(on, config) {\n    await configureXrayPlugin(on, config, {\n        jira: {\n            projectKey: \"CYP\",\n            url: \"https://atlassian.com\"\n        },\n        xray: {\n            uploadResults: true\n        }\n    });\n}\n</code></pre>"},{"location":"section/guides/uploadTestResults/#uploading-cucumber-test-results","title":"Uploading Cucumber test results","text":"<p>The following example consists of three scenarios for https://example.org, wrapping the tests described above. Since we know that the image test will always fail, we'll mark it as skipped to make use of custom Xray statuses (see here for more information).</p> <p>Note</p> <p>The Cucumber preprocessor plugin reports skipped scenarios by marking all the steps they contain as skipped. To mark a Cucumber test as skipped in Xray, you need to specify the respective step status. Xray will then combine the steps' statuses according to your status settings into an overall test status (e.g. if at least one step was skipped, the entire test will be considered skipped).</p> <p>When uploading the results, the plugin will create a test execution issue containing the three executed scenarios. As the third scenario has been marked as skipped and a custom status has been provided for skipped steps, the entire test for the image verification will also be marked as skipped.</p> <p></p> <p>Note</p> <p>Please read the Cucumber setup guide if you're confused about what's going on below.</p> scenarios.featurecypress.config.jssteps.js <pre><code>Feature: Example page UI tests\n\n    # Each scenario must be tagged with its corresponding\n    # Jira test issue key and global Xray tag prefix.\n    @TestName:CYP-410\n    Scenario: A title is visible\n        Given the example page\n        Then the title is visible\n\n    @TestName:CYP-411\n    Scenario: A link is visible\n        Given the example page\n        Then the link is visible\n\n    @skip\n    @TestName:CYP-412\n    Scenario: An image is visible\n        Given the example page\n        Then an image is visible\n</code></pre> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { defineConfig } from \"cypress\";\nimport fix from \"cypress-on-fix\";\nimport { configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin\";\n\nasync setupNodeEvents(on, config) {\n    const fixedOn = fix(on);\n    await addCucumberPreprocessorPlugin(fixedOn, config);\n    await configureXrayPlugin(fixedOn, config, {\n        jira: {\n            projectKey: \"CYP\",\n        },\n        xray: {\n            status: {\n                step: {\n                    skipped: \"SKIPPED\"\n                }\n            },\n            uploadResults: true\n        },\n        cucumber: {\n            featureFileExtension: \".feature\",\n            prefixes: {\n                test: \"TestName:\"\n            }\n        }\n    });\n    fixedOn(\"file:preprocessor\", async (file) =&gt; {\n        await syncFeatureFile(file);\n        const cucumberPlugin = createBundler({\n            plugins: [createEsbuildPlugin(config)],\n        });\n        return cucumberPlugin(file);\n    });\n    return config;\n}\n</code></pre> <pre><code>import { Given, Then } from \"@badeball/cypress-cucumber-preprocessor\";\n\nGiven(\"the example page\", () =&gt; {\n    cy.visit(\"https://example.org\");\n});\n\nThen(\"the title is visible\", () =&gt; {\n    cy.get(\"h1\").should(\"contain.text\", \"Example Domain\");\n});\n\nThen(\"the link is visible\", () =&gt; {\n    cy.get(\"a\").should(\"have.attr\", \"href\");\n});\n\nThen(\"an image is visible\", () =&gt; {\n    cy.get(\"img\").should(\"be.visible\");\n});\n</code></pre>"},{"location":"section/setup/installation/","title":"Installation","text":"<p>Run the following command to add the plugin to your Cypress project:</p> <pre><code>npm install --save-dev cypress-xray-plugin\n</code></pre> <p>This plugin easily handles:</p> <ul> <li>Cypress test executions: JavaScript/TypeScript specs</li> <li>Cucumber test executions: Cucumber feature files</li> </ul> <p>Below you will find the two ways to setup the plugin's basics, one for Cypress tests only (when not running Cucumber feature files) and for added Cucumber support.</p>"},{"location":"section/setup/installation/#cypress-tests","title":"Cypress tests","text":"<p>Modify the <code>setupNodeEvents()</code> function in your Cypress configuration file as follows:</p> <pre><code>import { configureXrayPlugin } from \"cypress-xray-plugin\";\n\n// ...\n    async setupNodeEvents(on, config) {\n        await configureXrayPlugin(\n            on,\n            config,\n            {\n                jira: {\n                    projectKey: \"PRJ\",         // placeholder value\n                    url: \"https://example.org\" // placeholder value\n                }\n            }\n        );\n    }\n// ...\n</code></pre> <p>Tip</p> <p>Check out the configuration for more information on how you should configure the plugin to make it work within your infrastructure. You can also shoot a glance at the examples for a more hands-on approach.</p>"},{"location":"section/setup/installation/#cucumber-tests","title":"Cucumber tests","text":"<p>For Cucumber support, this plugin builds upon the <code>cypress-cucumber-preprocessor</code> plugin for executing Cucumber feature files.</p> <p>With added Xray synchronization, this plugin allows you to automatically upload feature files to Xray when running your Cypress tests and to track their execution results in Xray.</p> <p>Run the additional following commands to handle Cucumber test executions as well:</p> <pre><code>npm install --save-dev @badeball/cypress-cucumber-preprocessor\nnpm install --save-dev @bahmutov/cypress-esbuild-preprocessor\nnpm install --save-dev cypress-on-fix\n</code></pre> <p>Note</p> <p>Package <code>cypress-on-fix</code> is required for registering multiple event handlers to Cypress's events (see here).</p> <p>To enable the plugin, modify the <code>setupNodeEvents()</code> function in your Cypress configuration file as follows:</p> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin\";\nimport fix from \"cypress-on-fix\";\n\n// ...\n    async setupNodeEvents(on, config) {\n        const fixedOn = fix(on);\n        await addCucumberPreprocessorPlugin(fixedOn, config);\n        await configureXrayPlugin(\n            fixedOn,\n            config,\n            {\n                jira: {\n                    projectKey: \"PRJ\",\n                    url: \"https://example.org\"\n                }\n                cucumber: {\n                    featureFileExtension: \".feature\"\n                }\n            }\n        );\n        fixedOn(\"file:preprocessor\", async (file) =&gt; {\n            await syncFeatureFile(file);\n            const cucumberPlugin = createBundler({\n                plugins: [createEsbuildPlugin(config)],\n            });\n            return cucumberPlugin(file);\n        });\n        return config;\n    }\n// ...\n</code></pre> <p>Order matters here!</p> <p>The Cucumber plugin must be added first so that its event listeners will run before those of the Xray plugin.</p> <pre><code>await addCucumberPreprocessorPlugin(fixedOn, config);\nawait configureXrayPlugin(fixedOn, config, /* ... */);\n</code></pre> <p>Otherwise, the Xray plugin won't be able to find the result report generated by the Cucumber plugin, because it won't exist yet.</p> <p>The highlighted lines are the ones addressing Xray support.</p> Lines 11-23 <p>Here you should configure the Xray plugin the way you want it to work with your Xray instance. Read this for more information.</p> Line 25 <p>This line enables upstream synchronization of your feature files with your Xray instance. See here for more information.</p>"},{"location":"section/setup/requirements/","title":"Requirements","text":""},{"location":"section/setup/requirements/#cypress-v10","title":"Cypress v10+","text":"<p>The plugin fully supports the following Cypress versions:</p> <ul> <li> \u2265 10.0.0</li> <li> \u2265 11.0.0</li> <li> \u2265 12.0.0</li> <li> \u2265 13.0.0</li> </ul> <p>Info</p> <p>Type <code>npx cypress --version</code> in a terminal in your project to check if v10 or above is installed already.</p> <p>Note</p> <p>Your mileage may vary for earlier versions, since these were never tested during development.</p>"},{"location":"section/setup/requirements/#nodejs-v18","title":"Node.js v18+","text":"<p>Since this plugin runs within the Cypress ecosphere, Node.js is required to run it along Cypress. With you using Cypress, you probably have installed it already.</p> <p>Info</p> <p>Type <code>node --version</code> in a terminal to check if v18 or above is installed already.</p>"}]}