{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Your browser does not support the video tag.     Two passing tests and one failing test for https://example.org. More info here. <p>A plugin for coupling together Cypress and Xray.</p> <ul> <li> Upload test results to Xray</li> <li> Attach screenshots as test execution evidence</li> <li> Attach videos to test execution issues</li> <li> Reuse existing test execution and test plan issues</li> <li> CI/CD ready</li> </ul> <p>Cucumber support</p> <ul> <li> Automatic synchronization of Xray step definitions based on your feature files</li> <li> Automatic execution of tests based on Xray step definitions ()</li> </ul> <p>Note</p> <p>This plugin only works when running Cypress through the CLI (i.e. <code>npx cypress run</code>).</p>"},{"location":"section/configuration/authentication/","title":"Authentication","text":"<p>To use this plugin, you need to authenticate to your Xray instance and \u2014 depending on the options you configured \u2014 your Jira instance as well. You must do this by setting up specific environment variables, e.g. a client ID and a client secret when using a cloud based Xray instance.</p> <p>To avoid adding your secrets to system environment variables, simply pass them to Cypress as a comma-separated list in the command line:</p> <pre><code>npx cypress run --env XRAY_CLIENT_ID=\"ABCDEF\",XRAY_CLIENT_SECRET=\"XYZ\"\n</code></pre> <p>Tip</p> <p>Have a look at this graph to quickly set up both Xray and Jira authentication. Note that Xray server does not require dedicated credentials in addition to the Jira credentials, effectively setting up both at the same time. <pre><code>graph TD\n    A{Xray&lt;br/&gt;instance};\n    B(\"XRAY_CLIENT_ID=&lt;i&gt;id&lt;/i&gt;&lt;br&gt;XRAY_CLIENT_SECRET=&lt;i&gt;secret&lt;/i&gt;&lt;br&gt;&lt;hr&gt;JIRA_USERNAME=&lt;i&gt;user@company.com&lt;/i&gt;&lt;br&gt;JIRA_API_TOKEN=&lt;i&gt;token&lt;/i&gt;\");\n    C{Jira&lt;br/&gt;auth};\n    A ---&gt;|Cloud| B;\n    A ---&gt;|Server| C;\n    C ---&gt;|PAT| D;\n    C ---&gt;|Basic| E;\n    D(\"JIRA_API_TOKEN=&lt;i&gt;token&lt;/i&gt;\");\n    E(\"JIRA_USERNAME=&lt;i&gt;user&lt;/i&gt;&lt;br&gt;JIRA_PASSWORD=&lt;i&gt;password&lt;/i&gt;\");\n    classDef code-node font-family:monospace,text-align:left;\n    class B,D,E code-node;</code></pre></p>"},{"location":"section/configuration/authentication/#xray","title":"Xray","text":"<p>Depending on the provided combinations of environment variables, the plugin will automatically know which Xray API type to use.</p> Providing multiple combinations <p>When providing more than one valid combination of variables, evaluation precedence of the authentication methods is as follows:</p> <ol> <li>Cloud authentication</li> <li>PAT authentication</li> <li>Basic authentication</li> </ol> <p>This way, the cloud version will always be chosen in favor of the server version.</p> <p>Below you will find all Xray authentication configurations that are currently supported and the environment variables you need to set to authenticate to their respective APIs.</p>"},{"location":"section/configuration/authentication/#xray-cloud","title":"Xray cloud","text":"<p>For the cloud version of Xray, the plugin expects the following environment variables to be set:</p> <ul> <li><code>XRAY_CLIENT_ID</code></li> <li><code>XRAY_CLIENT_SECRET</code></li> </ul> <p>Info</p> <p>Consult Xray's official documentation on how to set up cloud API keys.</p> <p>Example</p> <pre><code>npx cypress run --env XRAY_CLIENT_ID=\"ABCDEF\",XRAY_CLIENT_SECRET=\"XYZ\"\n</code></pre> <p>In contrast to Xray server, a Jira URL is not necessary by default. This can change however, depending on your configuration.</p>"},{"location":"section/configuration/authentication/#xray-server","title":"Xray server","text":"<p>For setting up Xray server authentication, see Jira server authentication. Additionally, you must provide the Jira URL of the Jira instance Xray is installed on.</p>"},{"location":"section/configuration/authentication/#jira","title":"Jira","text":"<p>Some options require a direct connection to the underlying Jira instance, such as <code>attachVideos</code>. These options address things which work natively in Jira and more importantly, independently of the features introduced by Xray add-ons. Jira-native features are things like issue assignment or uploading issue attachments, whereas those introduced by Xray are features like test steps, test execution tracking or test evidence upload.</p> <p>If you do not plan on using Jira-native features you can skip setting up Jira credentials.</p> <p>Tip</p> <p>You don't have to learn by heart which options require the Jira connection. In case you unknowingly enable one of them in the future without having set up the Jira credentials, the plugin will tell you in great detail which options have caused it to look for the credentials (before running any tests). Should you encounter such an error message, you can then either turn off the corresponding options or provide the credentials.</p> <p>As with Xray authentication, the plugin will automatically choose the authentication method depending on the provided environment variables.</p> Providing multiple combinations <p>When providing more than one valid combination of variables, evaluation precedence of the authentication methods is as follows:</p> <ol> <li>Basic authentication (Jira cloud)</li> <li>PAT authentication (Jira server)</li> <li>Basic authentication (Jira server)</li> </ol> <p>Below you will find all currently supported Jira authentication configurations and the environment variables you need to set.</p>"},{"location":"section/configuration/authentication/#jira-cloud","title":"Jira cloud","text":"<p>For the cloud version of Jira, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_USERNAME</code></li> <li><code>JIRA_API_TOKEN</code></li> </ul> <p>Info</p> <p>Consult Jira's official documentation on how to set up cloud credentials.</p> <p>Example</p> <pre><code>npx cypress run --env JIRA_USERNAME=\"user@company.com\",JIRA_API_TOKEN=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#jira-server","title":"Jira server","text":"<p>Depending on your Jira version, you may either need to use Jira's Personal Access Tokens (PATs) to authenticate to Jira, or Basic Authentication using your Jira username and password.</p> <p>Tip</p> <p>If you do not know which one you should be using, simply try PAT authentication first. If it works, great! You should stick to it, as PATs are a safer alternative to using usernames and passwords.</p> <p>If PAT-based authentication does not work or you cannot even create tokens, you will need to use basic authentication.</p>"},{"location":"section/configuration/authentication/#pat-authentication","title":"PAT authentication","text":"<p>For PAT authentication, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_API_TOKEN</code></li> </ul> <p>Info</p> <p>Consult Jira's official documentation on how to set up server API tokens.</p> <p>Example</p> <pre><code>npx cypress run --env JIRA_API_TOKEN=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#basic-authentication","title":"Basic authentication","text":"<p>For basic authentication, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_USERNAME</code></li> <li><code>JIRA_PASSWORD</code></li> </ul> <p>Example</p> <pre><code>npx cypress run --env JIRA_USERNAME=\"Bob\",JIRA_PASSWORD=\"superSecure!unhaxx0rable\"\n</code></pre>"},{"location":"section/configuration/cucumber/","title":"Cucumber","text":"<p>When Cucumber is enabled, you can use the following options to configure the way the plugin works with your feature files.</p>"},{"location":"section/configuration/cucumber/#mandatory-settings","title":"Mandatory settings","text":""},{"location":"section/configuration/cucumber/#featurefileextension","title":"<code>featureFileExtension</code>","text":"The file extension of feature files you want to run in Cypress. The plugin will use this to parse all matching files to extract any tags contained within them. Such tags are needed to identify to which test issue a feature file belongs (see targeting existing test issues with Cucumber). Environment variable <code>CUCUMBER_FEATURE_FILE_EXTENSION</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\ncucumber: {\nfeatureFileExtension: \".feature\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_FEATURE_FILE_EXTENSION=\".feature\"\n</code></pre>"},{"location":"section/configuration/cucumber/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/cucumber/#uploadfeatures","title":"<code>uploadFeatures</code>","text":"Set it to true to automatically create or update existing Xray issues (summary, steps), based on the feature file executed by Cypress. <p>Note</p> Enable this option if the source of truth for test cases are local feature files in Cypress and Xray is only used for tracking execution status/history. Environment variable <code>CUCUMBER_UPLOAD_FEATURES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\ncucumber: {\nuploadFeatures: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_UPLOAD_FEATURES=true\n</code></pre>"},{"location":"section/configuration/cucumber/#downloadfeatures","title":"<code>downloadFeatures</code>","text":"<p>Development</p> <p>This feature will be added in future versions of the plugin.</p> Set it to true to automatically download feature files from Xray for Cypress to execute. <p>Note</p> Enable this option if the source of truth for test cases are step definitions in Xray and Cypress is only used for running tests. Environment variable <code>CUCUMBER_DOWNLOAD_FEATURES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\ncucumber: {\ndownloadFeatures: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_DOWNLOAD_FEATURES=true\n</code></pre>"},{"location":"section/configuration/introduction/","title":"Introduction","text":"<p>Apart from authentication, all configuration takes place using the <code>configureXrayPlugin()</code> method in your cypress configuration file:</p> <pre><code>async setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\n// ...\n},\nplugin: {\n// ...\n},\nxray: {\n// ...\n},\ncucumber: {\n// ...\n},\nopenSSL: {\n// ...\n},\n});\n}\n</code></pre> <p>Every option can also be set via environment variables: <pre><code>npx cypress run --env JIRA_PROJECT_KEY=\"PRJ\",\\\nJIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\",\\\nXRAY_STATUS_PASSED=\"SUCCESS\"\n</code></pre> Alternatively (see Cypress documentation): <pre><code>CYPRESS_JIRA_PROJECT_KEY=\"PRJ\" \\\nCYPRESS_JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\" \\\nCYPRESS_XRAY_STATUS_PASSED=\"SUCCESS\" \\\nnpx cypress run\n</code></pre></p> <p>Note</p> <p>If you specify options in this method and provide their respective environment variables, the environment variable will take precedence over the option specified in the method.</p> <p>Tip</p> <p>Use <code>configureXrayPlugin()</code> to specify defaults when running and developing tests locally and environment variables in CI/CD setups to override these defaults.</p>"},{"location":"section/configuration/introduction/#separation-of-xray-and-jira","title":"Separation of Xray and Jira","text":"<p>You will probably wonder at some point why there's a split between Jira and Xray for some options, although they might be doing similar things, such as Jira's <code>attachVideos</code> and Xray's <code>uploadScreenshots</code>. The reason for this are the two different APIs which need to be worked with behind the scenes.</p> <p>On the one hand, there is the Xray API for dealing with tasks specific to Xray which don't exist in native Jira, such as test steps or screenshot evidence. On the other hand, there is the Jira API for tasks Jira handles natively, such as attaching files to arbitrary issues.</p> <p>An option's category is therefore simply determined by whichever API needs to be used to fulfill its tasks.</p> <p>Feedback</p> <p>Feel free to create an issue for options where you find the split confusing or unnecessary, so that potential clarifications can be discussed.</p>"},{"location":"section/configuration/jira/","title":"Jira","text":"<p>In order to access Xray, some Jira configuration is mandatory.</p>"},{"location":"section/configuration/jira/#mandatory-settings","title":"Mandatory settings","text":""},{"location":"section/configuration/jira/#projectkey","title":"<code>projectKey</code>","text":"The key of the Jira project. This option is mandatory since otherwise Xray would not know which project to work with. It is used in many places throughout the plugin, for example for mapping Cypress tests to existing test issues in Xray. Environment variable <code>JIRA_PROJECT_KEY</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\nprojectKey: \"PRJ\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_PROJECT_KEY=\"PRJ\"\n</code></pre>"},{"location":"section/configuration/jira/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/jira/#url","title":"<code>url</code>","text":"<p>Use this parameter to specify the base URL of your Jira instance.</p> <p>For Jira cloud, it is usually of the form <code>https://your-domain.atlassian.net</code> (without the <code>/jira</code> part, see here).</p> For Jira server, you can have a look here to determine your base URL. Environment variable <code>JIRA_URL</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\nurl: \"https://example.org/development/jira\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_URL=\"https://example.org/development/jira\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuekey","title":"<code>testExecutionIssueKey</code>","text":"The key of the test execution issue to attach the run results to. If undefined, Jira will always create a new test execution issue with each upload. <p>Note</p> Must be prefixed with the project key. Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_KEY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\ntestExecutionIssueKey: \"PRJ-123\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\"\n</code></pre>"},{"location":"section/configuration/jira/#testplanissuekey","title":"<code>testPlanIssueKey</code>","text":"A test plan issue key to attach the execution to. <p>Note</p> Must be prefixed with the project key. Environment variable <code>JIRA_TEST_PLAN_ISSUE_KEY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\ntestPlanIssueKey: \"PRJ-456\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_PLAN_ISSUE_KEY=\"PRJ-456\"\n</code></pre>"},{"location":"section/configuration/jira/#attachvideos","title":"<code>attachVideos</code>","text":"Whether any videos Cypress captured during test execution should be attached to the test execution issue on results upload. <p>Note</p> If set to <code>true</code>, requires the Jira URL and valid Jira credentials to be set. <p>Note</p> This option only takes effect once <code>uploadResults</code> is turned on. It is not possible to attach videos without uploading results. Environment variable <code>JIRA_ATTACH_VIDEOS</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\nattachVideos: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_ATTACH_VIDEOS=true\n</code></pre>"},{"location":"section/configuration/jira/#createtestissues","title":"<code>createTestIssues</code>","text":"Whether the plugin should create test issues for Cypress tests that have not been mapped to existing test issues (see targeting existing issues) when importing test results to Xray. Environment variable <code>JIRA_CREATE_TEST_ISSUES</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\ncreateTestIssues: false\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_CREATE_TEST_ISSUES=false\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuesummary","title":"<code>testExecutionIssueSummary</code>","text":"The summary of the test execution issue, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>testExecutionIssueKey</code>). Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_SUMMARY</code> Type <code>string</code> Default <code>`Execution Results [${t}]`</code> with <code>t</code> being a Unix timestamp when Cypress started testing Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\ntestExecutionIssueSummary: \"Monday morning regression test\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_SUMMARY=\"Monday morning regression test\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuedescription","title":"<code>testExecutionIssueDescription</code>","text":"The description of the test execution issue, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>testExecutionIssueKey</code>). Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION</code> Type <code>string</code> Default <code>`Cypress version: ${version} Browser: ${name} (${version})`</code> with values depending on Cypress and the chosen browser Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\ntestExecutionIssueDescription: \"This test run was approved by Mr Anderson.\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION=\"This test run was approved by Mr Anderson.\"\n</code></pre>"},{"location":"section/configuration/openSSL/","title":"OpenSSL","text":"<p>Tip</p> <p>This is an advanced section. Make sure to check out the examples to see in which scenarios changing OpenSSL configuration might make sense.</p> <p>Sometimes it is necessary to configure OpenSSL if your Xray instance sits behind a proxy or uses dedicated root certificates that aren't available by default. In this case, you can set the following options prior to running your Cypress tests to configure the plugin's internal OpenSSL setup.</p>"},{"location":"section/configuration/openSSL/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/openSSL/#rootcapath","title":"<code>rootCAPath</code>","text":"Specify the path to a root CA in <code>.pem</code> format. This will then be used during authentication &amp; communication with the Xray instance. Environment variable <code>OPENSSL_ROOT_CA_PATH</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nopenSSL: {\nrootCAPath: \"/home/cert.pem\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env OPENSSL_ROOT_CA_PATH=\"/home/cert.pem\"\n</code></pre>"},{"location":"section/configuration/openSSL/#secureoptions","title":"<code>secureOptions</code>","text":"A crypto constant (see list below) that will be used to configure the <code>securityOptions</code> of the <code>https.Agent</code> used for sending requests to your Xray instance. <p>Note</p> Compute their bitwise OR if you need to set more than one option. List of Security Options The following list of OpenSSL security option constants can be obtained by running the following code in a node environment:<pre><code>import { constants } from \"crypto\";\nconsole.log(constants);\n</code></pre> Name Value <code>OPENSSL_VERSION_NUMBER</code> 805306480 <code>SSL_OP_ALL</code> 2147485776 <code>SSL_OP_ALLOW_NO_DHE_KEX</code> 1024 <code>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</code> 262144 <code>SSL_OP_CIPHER_SERVER_PREFERENCE</code> 4194304 <code>SSL_OP_CISCO_ANYCONNECT</code> 32768 <code>SSL_OP_COOKIE_EXCHANGE</code> 8192 <code>SSL_OP_CRYPTOPRO_TLSEXT_BUG</code> 2147483648 <code>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</code> 2048 <code>SSL_OP_EPHEMERAL_RSA</code> 0 <code>SSL_OP_LEGACY_SERVER_CONNECT</code> 4 <code>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</code> 0 <code>SSL_OP_MICROSOFT_SESS_ID_BUG</code> 0 <code>SSL_OP_MSIE_SSLV2_RSA_PADDING</code> 0 <code>SSL_OP_NETSCAPE_CA_DN_BUG</code> 0 <code>SSL_OP_NETSCAPE_CHALLENGE_BUG</code> 0 <code>SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG</code> 0 <code>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</code> 0 <code>SSL_OP_NO_COMPRESSION</code> 131072 <code>SSL_OP_NO_ENCRYPT_THEN_MAC</code> 524288 <code>SSL_OP_NO_QUERY_MTU</code> 4096 <code>SSL_OP_NO_RENEGOTIATION</code> 1073741824 <code>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</code> 65536 <code>SSL_OP_NO_SSLv2</code> 0 <code>SSL_OP_NO_SSLv3</code> 33554432 <code>SSL_OP_NO_TICKET</code> 16384 <code>SSL_OP_NO_TLSv1</code> 67108864 <code>SSL_OP_NO_TLSv1_1</code> 268435456 <code>SSL_OP_NO_TLSv1_2</code> 134217728 <code>SSL_OP_NO_TLSv1_3</code> 536870912 <code>SSL_OP_PKCS1_CHECK_1</code> 0 <code>SSL_OP_PKCS1_CHECK_2</code> 0 <code>SSL_OP_PRIORITIZE_CHACHA</code> 2097152 <code>SSL_OP_SINGLE_DH_USE</code> 0 <code>SSL_OP_SINGLE_ECDH_USE</code> 0 <code>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</code> 0 <code>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</code> 0 <code>SSL_OP_TLS_BLOCK_PADDING_BUG</code> 0 <code>SSL_OP_TLS_D5_BUG</code> 0 <code>SSL_OP_TLS_ROLLBACK_BUG</code> 8388608 <code>ENGINE_METHOD_RSA</code> 1 <code>ENGINE_METHOD_DSA</code> 2 <code>ENGINE_METHOD_DH</code> 4 <code>ENGINE_METHOD_RAND</code> 8 <code>ENGINE_METHOD_EC</code> 2048 <code>ENGINE_METHOD_CIPHERS</code> 64 <code>ENGINE_METHOD_DIGESTS</code> 128 <code>ENGINE_METHOD_PKEY_METHS</code> 512 <code>ENGINE_METHOD_PKEY_ASN1_METHS</code> 1024 <code>ENGINE_METHOD_ALL</code> 65535 <code>ENGINE_METHOD_NONE</code> 0 <code>DH_CHECK_P_NOT_SAFE_PRIME</code> 2 <code>DH_CHECK_P_NOT_PRIME</code> 1 <code>DH_UNABLE_TO_CHECK_GENERATOR</code> 4 <code>DH_NOT_SUITABLE_GENERATOR</code> 8 <code>ALPN_ENABLED</code> 1 <code>RSA_PKCS1_PADDING</code> 1 <code>RSA_NO_PADDING</code> 3 <code>RSA_PKCS1_OAEP_PADDING</code> 4 <code>RSA_X931_PADDING</code> 5 <code>RSA_PKCS1_PSS_PADDING</code> 6 <code>RSA_PSS_SALTLEN_DIGEST</code> -1 <code>RSA_PSS_SALTLEN_MAX_SIGN</code> -2 <code>RSA_PSS_SALTLEN_AUTO</code> -2 <code>TLS1_VERSION</code> 769 <code>TLS1_1_VERSION</code> 770 <code>TLS1_2_VERSION</code> 771 <code>TLS1_3_VERSION</code> 772 <code>POINT_CONVERSION_COMPRESSED</code> 2 <code>POINT_CONVERSION_UNCOMPRESSED</code> 4 <code>POINT_CONVERSION_HYBRID</code> 6 Environment variable <code>OPENSSL_SECURE_OPTIONS</code> Type <code>number</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>import { constants } from \"crypto\";\nawait configureXrayPlugin({\nopenSSL: {\nsecureOptions: constants.SSL_OP_LEGACY_SERVER_CONNECT | constants.SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION; // 262148\n},\n});\n</code></pre> <pre><code>npx cypress run --env OPENSSL_SECURE_OPTIONS=262148\n</code></pre>"},{"location":"section/configuration/plugin/","title":"Plugin","text":"<p>The plugin offers several options for customizing the upload further.</p>"},{"location":"section/configuration/plugin/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/plugin/#overwriteissuesummary","title":"<code>overwriteIssueSummary</code>","text":"Decide whether to keep the issues' existing summaries or whether to overwrite them with each upload. Environment variable <code>PLUGIN_OVERWRITE_ISSUE_SUMMARY</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nplugin: {\noverwriteIssueSummary: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_OVERWRITE_ISSUE_SUMMARY=true\n</code></pre>"},{"location":"section/configuration/plugin/#normalizescreenshotnames","title":"<code>normalizeScreenshotNames</code>","text":"Some Xray setups might struggle with uploaded evidence if the filenames contain non-ASCII characters. With this option enabled, the plugin only keeps characters <code>a-zA-Z0-9.</code> in screenshot names and replaces all other sequences with <code>_</code>. Environment variable <code>PLUGIN_NORMALIZE_SCREENSHOT_NAMES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nplugin: {\nnormalizeScreenshotNames: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_NORMALIZE_SCREENSHOT_NAMES=true\n</code></pre>"},{"location":"section/configuration/plugin/#debug","title":"<code>debug</code>","text":"Turns on or off extensive debugging output. Environment variable <code>PLUGIN_DEBUG</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nplugin: {\ndebug: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_DEBUG=true\n</code></pre>"},{"location":"section/configuration/types/","title":"Option types","text":"<p>Below you will find accepted values of custom option types you can use when providing values to options through environment variables.</p>"},{"location":"section/configuration/types/#boolean","title":"Boolean","text":"Accepted values <ul> <li><code>true</code> <code>1</code> <code>yes</code> <code>y</code> <code>on</code></li> </ul> <ul> <li><code>false</code> <code>0</code> <code>no</code> <code>n</code> <code>off</code></li> </ul> <p>Example</p> <pre><code>npx cypress run --env XRAY_UPLOAD_RESULTS=yes\n</code></pre>"},{"location":"section/configuration/xray/","title":"Xray","text":"<p>You can provide a bunch of Xray settings which might become necessary depending on your project configuration.</p>"},{"location":"section/configuration/xray/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/xray/#uploadresults","title":"<code>uploadResults</code>","text":"Turns execution results upload on or off. Useful when switching upload on or off from the command line (via environment variables). Environment variable <code>XRAY_UPLOAD_RESULTS</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\nuploadResults: false\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_RESULTS=false\n</code></pre>"},{"location":"section/configuration/xray/#uploadscreenshots","title":"<code>uploadScreenshots</code>","text":"Turns on or off the upload of screenshots Cypress takes during test execution. <p>Note</p> This option only takes effect once <code>uploadResults</code> is turned on. It is not possible to upload screenshots without uploading results. Environment variable <code>XRAY_UPLOAD_SCREENSHOTS</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\nuploadScreenshots: false\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_SCREENSHOTS_=false\n</code></pre>"},{"location":"section/configuration/xray/#statuspassed","title":"<code>statusPassed</code>","text":"The status name of a test marked as passed in Cypress. Should be used when custom status names have been setup in Xray. Environment variable <code>XRAY_STATUS_PASSED</code> Type <code>string</code> Default <code>\"PASS\"</code> (when providing Xray server credentials) <code>\"PASSED\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\nstatusPassed: \"SUCCESS\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_PASSED=SUCCESS\n</code></pre>"},{"location":"section/configuration/xray/#statusfailed","title":"<code>statusFailed</code>","text":"The status name of a test marked as failed in Cypress. Should be used when custom status names have been setup in Xray. Environment variable <code>XRAY_STATUS_FAILED</code> Type <code>string</code> Default <code>\"FAIL\"</code> (when providing Xray server credentials) <code>\"FAILED\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\nstatusFailed: \"FAILURE\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_FAILED=FAILURE\n</code></pre>"},{"location":"section/configuration/xray/#testtype","title":"<code>testType</code>","text":"The test type of the test issues. This option will be used to set the corresponding field on Xray issues created during upload (happens when a test does not yet have a corresponding Xray issue). Environment variable <code>XRAY_TEST_TYPE</code> Type <code>string</code> Default <code>\"Manual\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\ntestType: \"Cucumber\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_TEST_TYPE=Cucumber\n</code></pre>"},{"location":"section/configuration/xray/#steps","title":"<code>steps</code>","text":"<p>All options related to manual test issue steps.</p>"},{"location":"section/configuration/xray/#update","title":"<code>update</code>","text":"Whether to update a manual test issue's test steps during execution results upload. <p>Warning</p> If set to true (default), all existing steps will be replaced with the plugin's steps. <p>Note</p> The plugin currently creates only one step containing the code of the corresponding Cypress test function. <p>Note</p> Steps of existing issues can only be updated if <code>overwriteIssueSummary</code> is enabled as well, since Xray requires an issue summary whenever test details are updated. Environment variable <code>XRAY_STEPS_UPDATE</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\nsteps: {\nupdate: false\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STEPS_UPDATE=false\n</code></pre>"},{"location":"section/configuration/xray/#maxlengthaction","title":"<code>maxLengthAction</code>","text":"The maximum length a step's action description can have in terms of characters. Some Xray instances might enforce limits on the length and reject step updates in case the action's description exceeds said limit. Environment variable <code>XRAY_STEPS_MAX_LENGTH_ACTION</code> Type <code>number</code> Default <code>8000</code> (more info) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nxray: {\nsteps: {\nmaxLengthAction: 1234\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STEPS_MAX_LENGTH_ACTION=1234\n</code></pre>"},{"location":"section/guides/featureFileSynchronization/","title":"Feature file synchronization","text":"<p>The plugin allows you to keep your local feature files in sync with the step definitions in Xray.</p>"},{"location":"section/guides/featureFileSynchronization/#feature-file-upload","title":"Feature file upload","text":"Synchronize step definitions in Xray based on your local feature files. <p>Uploading feature files is useful if the source of truth for test cases are local feature files in Cypress and Xray is only used for tracking execution results. You can enable the upload using the uploadFeatures setting and by making sure that feature file synchronization is enabled.</p> <p>Tip</p> <p>Don't forget to add tags to your scenarios to make issue reuse more comfortable.</p> <p>These tags are different for the cloud and server version. You can verify this by letting Xray export a Cucumber test case to a feature file followed by an inspection into the tags of the generated files.</p> <p>For Xray cloud, the tags must be provided in the following form: <pre><code>@TestName:CYP-129\nScenario: Redirect by clicking\n</code></pre> For Xray server, they must be provided like this: <pre><code>@CYP-129\nScenario: Redirect by clicking\n</code></pre></p> <p>Warning</p> <p>Please be aware that there is no way of keeping Xray's issue summaries when synchronizing issues this way. All Xray issue summaries will be replaced with the scenarios' names on successful import.</p> Example <p>In the following scenario, the existing example will be extended by an additional step.</p> demo.spec.featuredemo.spec.jscypress.config.jsVideo <pre><code>Feature: Example page redirection\n    @TestName:CYP-129\nScenario: Redirect by clicking\n        Given the example page\nWhen the link is clicked\nThen a redirect should occur\nAnd the test should fail\n</code></pre> <pre><code>import { Given, Then, When } from \"@badeball/cypress-cucumber-preprocessor\";\nGiven(\"the example page\", function () {\ncy.visit(\"https://example.org\");\n});\nWhen(\"the link is clicked\", function () {\n// Intercept the click, since it unfortunately redirects to a http:// location\n// and causes Cypress to abort the execution.\ncy.intercept(\"GET\", \"https://www.iana.org/domains/example\", (request) =&gt; {\nrequest.reply(\"link was clicked\");\n}).as(\"redirect\");\ncy.get(\"a\").click();\n});\nThen(\"a redirect should occur\", function () {\ncy.wait(\"@redirect\").then((request) =&gt; {\nexpect(request.response.body).to.eq(\"link was clicked\");\n});\n});\nThen(\"the test should fail\", function () {\nexpect(true).to.be.false;\n});\n</code></pre> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport * as createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { addXrayResultUpload, configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\nprojectKey: \"CYP\"\n},\ncucumber: {\nfeatureFileExtension: \".feature\",\nuploadFeatures: true\n}\n});\nawait addCucumberPreprocessorPlugin(on, config, {\nomitBeforeRunHandler: true,\nomitAfterRunHandler: true,\nomitBeforeSpecHandler: true,\nomitAfterSpecHandler: true,\nomitAfterScreenshotHandler: true,\n});\nawait addXrayResultUpload(on);\non(\"file:preprocessor\", async (file) =&gt; {\nawait syncFeatureFile(file);\nconst cucumberPlugin = createBundler({\nplugins: [createEsbuildPlugin(config)],\n});\nreturn cucumberPlugin(file);\n});\nreturn config;\n}\n// ...\n</code></pre> <p>Please note the the steps and the issue's summary changing due to the feature import.</p> <p>      Your browser does not support the video tag. </p>"},{"location":"section/guides/featureFileSynchronization/#language-support","title":"Language support","text":"<p>By default, Xray expects feature files to use English keywords. If you want to use different languages, make sure to add the corresponding <code># language:</code> header to your feature files, as described here.</p> <p>Example</p> <pre><code># language: de\nFunktionalit\u00e4t: Weiterleitung Beispielseite\n    @TestName:CYP-129\nSzenario: Weiterleitung durch Klick\n        Angenommen Beispielseite\nWenn Klick auf Link\nDann Weiterleitung findet statt\n</code></pre>"},{"location":"section/guides/featureFileSynchronization/#feature-file-download","title":"Feature file download","text":"<p>Development</p> <p>Synchronization of local feature files based on the step definitions as managed in Xray is currently still being worked on (i.e. download of Xray step definitions to local feature files and then running them).</p>"},{"location":"section/guides/openSSL/","title":"OpenSSL","text":"<p>It is not unlikely that you will find yourself sitting behind a proxy or for your Xray instance to be accessible through VPN only. In such scenarios, default HTTP requests might fail because of security concerns.</p> <p>Here, you will find a list of common security issues and how to approach them.</p>"},{"location":"section/guides/openSSL/#trusting-custom-root-cas","title":"Trusting custom root CAs","text":"<p>In case an Xray instance is setup on an internal network with custom CA certificates, you will need to download these certificates and provide them to the Xray plugin.</p> <p>Error messages requiring you to provide custom SSL certificates might look like any of the following:</p> <p>Error: unable to get issuer certificate</p> <p>Error: unable to verify the first certificate</p> <p>Solution</p> <p>Download the SSL certificate of your CA and make sure it is in <code>.pem</code> format. Then, tell the plugin to trust that CA by providing the certificate's path in the options:</p> <pre><code>await configureXrayPlugin({\nopenSSL: {\nrootCAPath: \"/home/cert.pem\"\n},\n});\n</code></pre>"},{"location":"section/guides/openSSL/#providing-security-options","title":"Providing security options","text":"<p>Some webservers might run outdated or legacy code, including the one where your Xray instance might be installed. Modern HTTP clients usually reject communication attempts to such servers out of security considerations. The clients can however be told to allow insecure communcation by setting appropriate flags.</p> <p>Error messages requiring you to provide security options might look like any of the following:</p> <p>Error: unsafe legacy renegotiation disabled</p> <p>Solution</p> <p>Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers:</p> <pre><code>import { constants } from \"crypto\";\nawait configureXrayPlugin({\nopenSSL: {\nsecureOptions: constants.SSL_OP_LEGACY_SERVER_CONNECT,\n},\n});\n</code></pre>"},{"location":"section/guides/targetingExistingIssues/","title":"Targeting existing issues","text":"<p>Usually, it is best to target and reuse existing Jira issues to not clutter up your projects with unnecessary test case (or test execution) issues.</p> <p>Tip</p> <p>Reusing existing test case issues is highly recommended. It simplifies test case management a lot.</p>"},{"location":"section/guides/targetingExistingIssues/#reuse-test-case-issues","title":"Reuse test case issues","text":"<p>By default, Xray will always create a new test case issue whenever you execute a test and your project does not contain a test case issue with the exact name as your test case.</p> <p>Info</p> <p>The exact name of test cases in Cypress is the concatenation of the names of <code>it()</code> and <code>describe()</code> functions. For example, the following test case is called <code>\"a suite has a test case\"</code>:</p> <pre><code>describe(\"a suite\", () =&gt; {\nit(\"has a test case\", () =&gt; {\n// ...\n});\n});\n</code></pre> <p>This means, that whenever you change the titles of your test cases in Cypress in <code>it()</code> or <code>describe()</code> functions, Xray will create new test case issues for you on result upload. This applies to the other direction, too. If someone changes test case issue titles in Xray and the test cases in Cypress aren't adapted accordingly, you will end up with new test case issues.</p> <p>To prevent that from happening, you can include test case issue keys in your test case titles. Simply add the test case issue's key anywhere in the name of the <code>it()</code> function:</p> <pre><code>describe(\"a suite\", () =&gt; {\nit(\"PRJ-123 has a test case\", () =&gt; {\n// ...\n});\n});\n</code></pre> <p>  The plugin parses all test case names and looks for sequences of the form <code>&lt;projectKey&gt;-&lt;number&gt;</code>, with <code>&lt;projectKey&gt;</code> being the configured project key and <code>&lt;number&gt;</code> the issue number.</p> Example <p>The following example builds upon the upload results example, which created three issues <code>CYP-124</code>, <code>CYP-125</code> and <code>CYP-126</code>.</p> <p>For this execution, the test cases have been renamed both in Cypress and Xray (see the video). By including the test case issue keys in the titles, Xray will be able to match results to issues even if none of the test case names match anymore.</p> demo.spec.cy.jsVideo <pre><code>describe(\"the upload demo\", () =&gt; {\nbeforeEach(() =&gt; {\ncy.visit(\"https://example.org\");\n});\nit(\"CYP-124 should do something with the title\", () =&gt; {\ncy.get(\"h1\").should(\"exist\");\n});\nit(\"CYP-125 should find two lovely paragraphs\", () =&gt; {\ncy.get(\"p\").should(\"have.length\", 2);\n});\nit(\"CYP-126 should still be unable to find a delicious span element\", () =&gt; {\ncy.get(\"span\").should(\"exist\");\n});\n})\n</code></pre> <p>      Your browser does not support the video tag. </p> <p>Bug</p> <p>There's currently an Xray cloud bug affecting the reuse of existing issues if the test title contains whitespace in front of a dash, such as <code>\"[START] - should be able to login\"</code>. Without a test issue key in the test title, (i.e. relying on summary matching for issue reuse during consecutive uploads), Xray will create duplicates even if there's a matching issue already.</p> <p>The corresponding bug can be tracked here: https://jira.getxray.app/browse/XRAYCLOUD-6031.</p> <p>Including test issue keys is therefore even more recommended to avoid running into this problem.</p>"},{"location":"section/guides/targetingExistingIssues/#reuse-cucumber-test-issues","title":"Reuse Cucumber test issues","text":"<p>In feature files, you can annotate scenarios with a tag containing the corresponding test case issue key. Without tags, the exact names of the test cases will again be used, this time being the concatenation of the <code>Feature</code> and <code>Scenario</code> names.</p> <p>In general, the plugin looks for scenario tags of the form:</p> <ul> <li><code>@TestName:&lt;projectKey&gt;-&lt;number&gt;</code></li> <li><code>@&lt;projectKey&gt;-&lt;number&gt;</code></li> </ul> <p>Tip</p> <p>Just stick to this handy chart to decide which tagging scheme you should employ. <pre><code>graph LR\n    A{Xray&lt;br/&gt;instance};\n    B[\"@TestName:CYP-123\"];\n    C[\"@CYP-123\"];\n    A ---&gt;|&amp;nbspCloud&amp;nbsp| B;\n    A ---&gt;|&amp;nbspServer&amp;nbsp| C;\n    classDef code-node font-family:monospace;\n    class B,C code-node;</code></pre></p> Additional information <p>The reason for the distinction is Xray cloud and Xray server expecting different tags during feature file import when mapping scenarios to existing test case issues.</p> <p>While the plugin itself does not care which one you use, you should probably stick to the one that better fits your Xray instance. Using the wrong one might not matter in terms of reusing Cucumber test issues, but it is going to matter when enabling feature file importing in the future, since then you would need to either:</p> <ul> <li> <p>Change all existing tags to the right ones, i.e. for Xray cloud:</p> <p><pre><code>@CYP-123\nScenario: A scenario\n</code></pre> <p>\u2193</p> <pre><code>@TestName:CYP-123\nScenario: A scenario\n</code></pre></p> </li> <li> <p>Add \"the right ones\" to your scenarios, i.e. for Xray cloud:</p> <p><pre><code>@CYP-123\nScenario: A scenario\n</code></pre> <p>\u2193</p> <pre><code>@CYP-123 @TestName:CYP-123\nScenario: A scenario\n</code></pre></p> <p>This has the additional disadvantage that Xray will add the wrong one (<code>@CYP-123</code>) as a label to your test case issue during feature file import.</p> </li> </ul> Example <p>In the following scenario, the link on https://example.org will be clicked and its redirection will be verified.</p> demo.spec.featuredemo.spec.jscypress.config.jsVideo <pre><code>Feature: Example page redirection\n    @TestName:CYP-129\nScenario: Redirect by clicking\n        Given the example page\nWhen the link is clicked\nThen a redirect should occur\n</code></pre> <pre><code>import { Given, Then, When } from \"@badeball/cypress-cucumber-preprocessor\";\nGiven(\"the example page\", function () {\ncy.visit(\"https://example.org\");\n});\nWhen(\"the link is clicked\", function () {\n// Intercept the click, since it unfortunately redirects to a http:// location\n// and causes Cypress to abort the execution.\ncy.intercept(\"GET\", \"https://www.iana.org/domains/example\", (request) =&gt; {\nrequest.reply(\"link was clicked\");\n}).as(\"redirect\");\ncy.get(\"a\").click();\n});\nThen(\"a redirect should occur\", function () {\ncy.wait(\"@redirect\").then((request) =&gt; {\nexpect(request.response.body).to.eq(\"link was clicked\");\n});\n});\n</code></pre> <p>See Cucumber installation.</p> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport * as createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { addXrayResultUpload, configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\nprojectKey: \"CYP\"\n}\n});\nawait addCucumberPreprocessorPlugin(on, config, {\nomitBeforeRunHandler: true,\nomitAfterRunHandler: true,\nomitBeforeSpecHandler: true,\nomitAfterSpecHandler: true,\nomitAfterScreenshotHandler: true,\n});\nawait addXrayResultUpload(on);\non(\"file:preprocessor\", async (file) =&gt; {\nawait syncFeatureFile(file);\nconst cucumberPlugin = createBundler({\nplugins: [createEsbuildPlugin(config)],\n});\nreturn cucumberPlugin(file);\n});\nreturn config;\n}\n// ...\n</code></pre> <p>      Your browser does not support the video tag. </p>"},{"location":"section/guides/targetingExistingIssues/#reuse-test-execution-issues","title":"Reuse test execution issues","text":"<p>By default, Xray will always create a new test execution issue whenever you upload test results.</p> <p>You can prevent that from happening by specifying the test execution issue key you want to attach the results to.</p> Example <p>The following example builds upon the upload results example, which created test execution issue <code>CYP-123</code>.</p> <p>By providing the test execution issue key, Xray won't create a new execution issue for this upload. To highlight the issue being reused, let's also add a new test case that looks for an <code>&lt;a&gt;</code> element.</p> demo.spec.cy.jscypress.config.jsVideo <pre><code>describe(\"the upload demo\", () =&gt; {\nbeforeEach(() =&gt; {\ncy.visit(\"https://example.org\");\n});\nit(\"CYP-124 should find a title element\", () =&gt; {\ncy.get(\"h1\").should(\"exist\");\n});\nit(\"CYP-125 should find two paragraph elements\", () =&gt; {\ncy.get(\"p\").should(\"have.length\", 2);\n});\nit(\"CYP-126 should fail to find a span element\", () =&gt; {\ncy.get(\"span\").should(\"exist\");\n});\nit(\"should find an anchor element\", () =&gt; {\ncy.get(\"a\").should(\"exist\");\n});\n})\n</code></pre> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\nprojectKey: \"CYP\",\ntestExecutionIssueKey: \"CYP-123\"\n},\nxray: {\nuploadResults: true\n}\n});\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre> <p>      Your browser does not support the video tag. </p>"},{"location":"section/guides/uploadTestResults/","title":"Upload test results","text":"The plugin allows you to upload Cypress test results to Xray server or Xray cloud."},{"location":"section/guides/uploadTestResults/#setup","title":"Setup","text":"<p>To upload your test results to Xray, make sure you have enabled the results upload in your configuration file:</p> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\nxray: {\nuploadResults: true\n}\n});\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre> <p>Afterwards, simply run Cypress:</p> <pre><code>npx cypress run\n</code></pre> <p>Note</p> <p>Don't forget to provide your authentication credentials.</p>"},{"location":"section/guides/uploadTestResults/#how-it-works","title":"How it works","text":"<p>When uploading results, Xray will create a new test issue for each executed test unless any of the following apply:</p> <ul> <li>there already exists a test issue with the exact name as the executed test</li> <li>you have provided a test issue key to tell Xray which issue to reuse</li> </ul> <p>Xray will also create a new test execution issue, unless you tell Xray to reuse a specific test execution issue.</p> Xray Documentation <p>You can find more information on the mechanisms and constraints regarding imports of test execution results here for Xray server and here for Xray cloud.</p> Example <p>The following example consists of three test cases for https://example.org:</p> <ol> <li> The first one tries to find a <code>&lt;h1&gt;</code> element.</li> <li> The second one asserts that the page contains two <code>&lt;p&gt;</code> elements.</li> <li> The third one tries to find a <code>&lt;span&gt;</code> element, which does not exist on the page.</li> </ol> <p>When uploading the results, Xray will create three test case issues corresponding to the test cases that have been executed. Additionally, a test execution issue will be created containing the three executed test issues. Since Cypress automatically takes screenshots on failure, the execution will also contain the screenshot as evidence for the failed test case.</p> demo.spec.cy.jscypress.config.jsVideo <pre><code>describe(\"the upload demo\", () =&gt; {\nbeforeEach(() =&gt; {\ncy.visit(\"https://example.org\");\n});\nit(\"should find a title element\", () =&gt; {\ncy.get(\"h1\").should(\"exist\");\n});\nit(\"should find two paragraph elements\", () =&gt; {\ncy.get(\"p\").should(\"have.length\", 2);\n});\nit(\"should fail to find a span element\", () =&gt; {\ncy.get(\"span\").should(\"exist\");\n});\n})\n</code></pre> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\nprojectKey: \"CYP\"\n},\nxray: {\nuploadResults: true\n}\n});\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre> <p>      Your browser does not support the video tag. </p>"},{"location":"section/setup/installation/","title":"Installation","text":"<p>This plugin can either be run:</p> <ul> <li>without Cucumber support (standard): when you keep all your Cypress test cases in plain JavaScript/TypeScript files</li> <li>with Cucumber support: when using Cucumber feature files for running tests</li> </ul> <p>Tip</p> <p>You can always switch between both setups later on. If you are unsure and want to try things out first, do not setup Cucumber for now.</p> <p>Run the following command to add the plugin to your Cypress project:</p> <pre><code>npm i -D cypress-xray-plugin\n</code></pre> <p>and register the plugin's event listeners in the <code>e2e.js</code> file:</p> <pre><code>import \"cypress-xray-plugin/register\";\n</code></pre>"},{"location":"section/setup/installation/#standard-installation","title":"Standard installation","text":"<p>Modify the <code>setupNodeEvents()</code> function in your Cypress configuration file as follows:</p> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\nprojectKey: \"PRJ\" // just a placeholder\n}\n});\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre> <p>Tip</p> <p>Check out the configuration for more information on how you should configure the plugin to make it work within your infrastructure. You can also shoot a glance at the examples for a more hands-on approach.</p>"},{"location":"section/setup/installation/#cucumber-support","title":"Cucumber support","text":"<p>For Cucumber support, this plugin builds upon the cypress-cucumber-preprocessor plugin for executing Cucumber feature files.</p> <p>With added Xray synchronization, this plugin allows you to automatically download or upload feature files to Xray when running your Cypress tests and to track their execution results in Xray.</p> <p>Note</p> <p>The following section is unfortunately quite involved. Cypress currently does not allow registering multiple plugins, but this plugin relies on the aforementioned Cucumber preprocessor to work properly. Once this changes, this section will become much more streamlined, I promise </p> <p>Run the following commands to add Cucumber executability (more information here) to your project:</p> <pre><code>npm i -D @badeball/cypress-cucumber-preprocessor\nnpm i -D @bahmutov/cypress-esbuild-preprocessor\n</code></pre> <p>To enable the plugin, modify the <code>setupNodeEvents()</code> function in your Cypress configuration file as follows:</p> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport * as createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { addXrayResultUpload, configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin/plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin({\njira: {\nprojectKey: \"PRJ\"\n},\ncucumber: {\nfeatureFileExtension: \".feature\"\n}\n});\nawait addCucumberPreprocessorPlugin(on, config, {\nomitBeforeRunHandler: true,\nomitAfterRunHandler: true,\nomitBeforeSpecHandler: true,\nomitAfterSpecHandler: true,\nomitAfterScreenshotHandler: true,\n});\nawait addXrayResultUpload(on);\non(\"file:preprocessor\", async (file) =&gt; {\nawait syncFeatureFile(file);\nconst cucumberPlugin = createBundler({\nplugins: [createEsbuildPlugin(config)],\n});\nreturn cucumberPlugin(file);\n});\nreturn config;\n}\n// ...\n</code></pre> <p>The highlighted lines are the ones addressing Xray support.</p> Lines 8-15 <p>Here you should configure the Xray plugin the way you want it to work with your Xray instance. See here for more information.</p> Line 23 <p>This line enables the upload of test results to your Xray instance when Cypress is done running your tests.</p> Line 25 <p>This line enables upstream and downstream synchronization of your feature files with your Xray instance. See here for more information.</p>"},{"location":"section/setup/requirements/","title":"Requirements","text":""},{"location":"section/setup/requirements/#nodejs","title":"Node.JS","text":"<p>Since this plugin runs within the Cypress ecosphere, Node.JS is required to run it along Cypress. With you using Cypress, you probably have installed it already.</p> <p>Info</p> <p>Type <code>node --version</code> in a terminal to check if it's installed already.</p>"}]}