{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Your browser does not support the video tag.     Two passing tests and one failing test for https://example.org. A plugin for coupling together Cypress and Xray. <ul> <li>Upload test results to Xray</li> <li>Attach screenshots as test execution evidence</li> <li>Attach videos to test execution issues</li> <li>Reuse existing test execution and test plan issues</li> <li>CI/CD ready</li> <li>Cucumber support</li> </ul> <p> image/svg+xml Cucumber only:</p> <ul> <li>Automatic import of feature files to Jira</li> </ul> <p> Future features:</p> <ul> <li>Automatic execution of Cucumber tests based on Xray step definitions</li> </ul> <p>Note</p> <p>This plugin only works when running Cypress through the CLI (i.e. <code>npx cypress run</code>).</p>"},{"location":"section/configuration/authentication/","title":"Authentication","text":"<p>To use this plugin, you need to authenticate to both your Xray instance and your Jira instance. You must do this by setting up specific environment variables, e.g. a client ID and a client secret when using a cloud based Xray instance.</p> <p>To avoid adding your secrets to system environment variables, simply pass them to Cypress as a comma-separated list in the command line:</p> <pre><code>npx cypress run --env XRAY_CLIENT_ID=\"ABCDEF\",XRAY_CLIENT_SECRET=\"XYZ\"\n</code></pre> <p>Tip</p> <p>Have a look at this graph to quickly set up Xray and Jira authentication. Note that Xray server does not require dedicated credentials in addition to the Jira credentials, effectively setting up both at the same time. <pre><code>graph TD\n    A{Xray&lt;br/&gt;instance};\n    B(\"XRAY_CLIENT_ID=&lt;i&gt;id&lt;/i&gt;&lt;br&gt;XRAY_CLIENT_SECRET=&lt;i&gt;secret&lt;/i&gt;&lt;br&gt;&lt;hr&gt;JIRA_USERNAME=&lt;i&gt;user@company.com&lt;/i&gt;&lt;br&gt;JIRA_API_TOKEN=&lt;i&gt;token&lt;/i&gt;\");\n    C{Jira&lt;br/&gt;auth};\n    A ---&gt;|Cloud| B;\n    A ---&gt;|Server| C;\n    C ---&gt;|PAT| D;\n    C ---&gt;|Basic| E;\n    D(\"JIRA_API_TOKEN=&lt;i&gt;token&lt;/i&gt;\");\n    E(\"JIRA_USERNAME=&lt;i&gt;user&lt;/i&gt;&lt;br&gt;JIRA_PASSWORD=&lt;i&gt;password&lt;/i&gt;\");\n    classDef code-node font-family:monospace,text-align:left;\n    class B,D,E code-node;</code></pre></p>"},{"location":"section/configuration/authentication/#xray","title":"Xray","text":"<p>Depending on the provided combinations of environment variables, the plugin will automatically know which Xray API type to use.</p> Providing multiple combinations <p>When providing more than one valid combination of variables, evaluation precedence of the authentication methods is as follows:</p> <ol> <li>Cloud authentication</li> <li>PAT authentication</li> <li>Basic authentication</li> </ol> <p>Below you will find all Xray authentication configurations that are currently supported and the environment variables you need to set to authenticate to their respective APIs.</p>"},{"location":"section/configuration/authentication/#xray-cloud","title":"Xray cloud","text":"<p>For the cloud version of Xray, the plugin expects the following environment variables to be set:</p> <ul> <li><code>XRAY_CLIENT_ID</code></li> <li><code>XRAY_CLIENT_SECRET</code></li> </ul> <p>Info</p> <p>Consult Xray's official documentation on how to set up cloud API keys.</p> <p>Example</p> <pre><code>npx cypress run --env XRAY_CLIENT_ID=\"ABCDEF\",XRAY_CLIENT_SECRET=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#xray-server","title":"Xray server","text":"<p>For setting up Xray server authentication, see Jira server authentication.</p> <p>Note</p> <p>Xray server does not require any additional credentials.</p>"},{"location":"section/configuration/authentication/#jira","title":"Jira","text":"<p>As with Xray authentication, the plugin will automatically choose the authentication method depending on the provided environment variables.</p> Providing multiple combinations <p>When providing more than one valid combination of variables, evaluation precedence of the authentication methods is as follows:</p> <ol> <li>Basic authentication (Jira cloud)</li> <li>PAT authentication (Jira server)</li> <li>Basic authentication (Jira server)</li> </ol> <p>Below you will find all currently supported Jira authentication configurations and the environment variables you need to set.</p>"},{"location":"section/configuration/authentication/#jira-cloud","title":"Jira cloud","text":"<p>For the cloud version of Jira, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_USERNAME</code></li> <li><code>JIRA_API_TOKEN</code></li> </ul> <p>Info</p> <p>Consult Jira's official documentation on how to set up cloud credentials.</p> <p>Example</p> <pre><code>npx cypress run --env JIRA_USERNAME=\"user@company.com\",JIRA_API_TOKEN=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#jira-server","title":"Jira server","text":"<p>Depending on your Jira version, you may either need to use Jira's Personal Access Tokens (PATs) to authenticate to Jira, or Basic Authentication using your Jira username and password.</p> <p>Tip</p> <p>If you do not know which one you should be using, simply try PAT authentication first. If it works, great! You should stick to it, as PATs are a safer alternative to using usernames and passwords.</p> <p>If PAT-based authentication does not work or you cannot even create tokens, you will need to use basic authentication.</p>"},{"location":"section/configuration/authentication/#pat-authentication","title":"PAT authentication","text":"<p>For PAT authentication, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_API_TOKEN</code></li> </ul> <p>Info</p> <p>Consult Jira's official documentation on how to set up server API tokens.</p> <p>Example</p> <pre><code>npx cypress run --env JIRA_API_TOKEN=\"XYZ\"\n</code></pre>"},{"location":"section/configuration/authentication/#basic-authentication","title":"Basic authentication","text":"<p>For basic authentication, the plugin expects the following environment variables to be set:</p> <ul> <li><code>JIRA_USERNAME</code></li> <li><code>JIRA_PASSWORD</code></li> </ul> <p>Example</p> <pre><code>npx cypress run --env JIRA_USERNAME=\"Bob\",JIRA_PASSWORD=\"superSecure!unhaxx0rable\"\n</code></pre>"},{"location":"section/configuration/cucumber/","title":"Cucumber","text":"<p>When Cucumber is enabled, you can use the following options to configure the way the plugin works with your feature files.</p>"},{"location":"section/configuration/cucumber/#mandatory-settings","title":"Mandatory settings","text":""},{"location":"section/configuration/cucumber/#featurefileextension","title":"<code>featureFileExtension</code>","text":"<p>The file extension of feature files you want to run in Cypress. The plugin will use this to parse all matching files to extract any tags contained within them. Such tags are needed to identify to which test issue a feature file belongs (see targeting existing test issues with Cucumber).</p> Environment variable <code>CUCUMBER_FEATURE_FILE_EXTENSION</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\ncucumber: {\nfeatureFileExtension: \".feature\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_FEATURE_FILE_EXTENSION=\".feature\"\n</code></pre>"},{"location":"section/configuration/cucumber/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/cucumber/#downloadfeatures","title":"<code>downloadFeatures</code>","text":"<p>Development</p> <p>This feature will be added in future versions of the plugin.</p> <p>Set it to true to automatically download feature files from Xray for Cypress to execute.</p> <p>Note</p> <p>Enable this option if the source of truth for test cases are step definitions in Xray and Cypress is only used for running tests.</p> Environment variable <code>CUCUMBER_DOWNLOAD_FEATURES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\ncucumber: {\ndownloadFeatures: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_DOWNLOAD_FEATURES=true\n</code></pre>"},{"location":"section/configuration/cucumber/#uploadfeatures","title":"<code>uploadFeatures</code>","text":"<p>Set it to true to automatically create or update existing Xray issues (steps, labels, ...), based on the feature file executed by Cypress.</p> <p>Note</p> <p>Enable this option if the source of truth for test cases are local feature files in Cypress and Xray is only used for tracking execution status/history.</p> Environment variable <code>CUCUMBER_UPLOAD_FEATURES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\ncucumber: {\nuploadFeatures: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env CUCUMBER_UPLOAD_FEATURES=true\n</code></pre>"},{"location":"section/configuration/introduction/","title":"Introduction","text":"<p>Apart from authentication, all configuration takes place using the <code>configureXrayPlugin()</code> method in your cypress configuration file:</p> <pre><code>async setupNodeEvents(on, config) {\nawait configureXrayPlugin(config, {\njira: {\n// ...\n},\nplugin: {\n// ...\n},\nxray: {\n// ...\n},\ncucumber: {\n// ...\n},\nopenSSL: {\n// ...\n},\n});\n}\n</code></pre> <p>Every option can also be set via environment variables: <pre><code>npx cypress run --env JIRA_PROJECT_KEY=\"PRJ\",\\\nJIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\",\\\nXRAY_STATUS_PASSED=\"SUCCESS\"\n</code></pre> Alternatively (see Cypress documentation): <pre><code>CYPRESS_JIRA_PROJECT_KEY=\"PRJ\" \\\nCYPRESS_JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\" \\\nCYPRESS_XRAY_STATUS_PASSED=\"SUCCESS\" \\\nnpx cypress run\n</code></pre></p> <p>Note</p> <p>If you specify options in this method and provide their respective environment variables, the environment variable will take precedence over the option specified in the method.</p> <p>Tip</p> <p>Use <code>configureXrayPlugin()</code> to specify defaults when running and developing tests locally and environment variables in CI/CD setups to override these defaults.</p>"},{"location":"section/configuration/introduction/#separation-of-xray-and-jira","title":"Separation of Xray and Jira","text":"<p>You will probably wonder at some point why there's a split between Jira and Xray for some options, although they might be doing similar things, such as Jira's <code>attachVideos</code> and Xray's <code>uploadScreenshots</code>. The reason for this are the two different APIs which need to be worked with behind the scenes.</p> <p>On the one hand, there is the Xray API for dealing with tasks specific to Xray which don't exist in native Jira, such as test steps or screenshot evidence. On the other hand, there is the Jira API for tasks Jira handles natively, such as attaching files to arbitrary issues.</p> <p>An option's category is therefore simply determined by whichever API needs to be used to fulfill its tasks.</p> <p>Feedback</p> <p>Feel free to create an issue for options where you find the split confusing or unnecessary, so that potential clarifications can be discussed.</p>"},{"location":"section/configuration/jira/","title":"Jira","text":"<p>In order to access Xray, some Jira configuration is mandatory.</p>"},{"location":"section/configuration/jira/#mandatory-settings","title":"Mandatory settings","text":""},{"location":"section/configuration/jira/#projectkey","title":"<code>projectKey</code>","text":"<p>The key of the Jira project. This option is mandatory since otherwise Xray would not know which project to work with. It is used in many places throughout the plugin, for example for mapping Cypress tests to existing test issues in Xray.</p> Environment variable <code>JIRA_PROJECT_KEY</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nprojectKey: \"PRJ\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_PROJECT_KEY=\"PRJ\"\n</code></pre>"},{"location":"section/configuration/jira/#url","title":"<code>url</code>","text":"<p>Use this parameter to specify the base URL of your Jira instance.</p> <p>For Jira cloud, it is usually of the form <code>https://your-domain.atlassian.net</code> (without the <code>/jira</code> part, see here).</p> <p>For Jira server, you can have a look here to determine your base URL.</p> Environment variable <code>JIRA_URL</code> Type <code>string</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nurl: \"https://example.org/development/jira\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_URL=\"https://example.org/development/jira\"\n</code></pre>"},{"location":"section/configuration/jira/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/jira/#attachvideos","title":"<code>attachVideos</code>","text":"<p>Whether any videos Cypress captured during test execution should be attached to the test execution issue on results upload.</p> <p>Note</p> <p>This option only takes effect once <code>uploadResults</code> is turned on. It is not possible to attach videos without uploading results.</p> Environment variable <code>JIRA_ATTACH_VIDEOS</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\njira: {\nattachVideos: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_ATTACH_VIDEOS=true\n</code></pre>"},{"location":"section/configuration/jira/#fields","title":"<code>fields</code>","text":"<p>Jira Field IDs to make all fields required during the upload process uniquely identifiable. By default, the plugin accesses field information using the fields' names (ignoring case). Therefore, providing Jira field IDs can make sense in the following scenarios:</p> <ul> <li> <p>Your Jira language setting is a language other than English</p> <p>Example</p> <p>When the plugin tries to access the summary of some issues, it will look for a field with name <code>Summary</code> by default. However, if Jira is set to French for example, it will return a field called <code>R\u00e9sum\u00e9</code> instead.</p> <p>In these situations, the plugin will display an error message containing the fields it received and their IDs. The ID of field <code>R\u00e9sum\u00e9</code> could then be copied to the <code>summary</code> option, fixing the error in future uploads:</p> <pre><code>Failed to fetch Jira field ID for field with name: Summary\nMake sure the field actually exists and that your Jira language settings did not modify the field's name\n\nAvailable fields:\n  name: R\u00e9sum\u00e9, id: summary\n  name: Type de Test, id: customfield_42069\n  ...\n</code></pre> </li> <li> <p>Your Jira project contains several fields with identical names</p> <p>Example</p> <p>Jira does not prohibit configuring multiple fields with the same name. There might be multiple fields called <code>Summary</code> for example, the default Jira one and another one for descriptions of defects reported by customers.</p> <p>In these situations, the plugin will display an error message containing the duplicates it detected and their properties, including the field IDs. The ID of Jira's summary field could then again be copied to the <code>summary</code> option, fixing the error in future uploads:</p> <pre><code>Failed to fetch Jira field ID for field with name: Summary\nThere are multiple fields with this name\n\nDuplicates:\n  id: summary,           name: summary, clauseNames: summary\n  id: customfield_12345, name: Summary, clauseNames: summary (defect)\n  ...\n</code></pre> </li> </ul> <p>Info</p> <p>Please consult the official documentation for more information about field IDs: https://confluence.atlassian.com/jirakb/how-to-find-id-for-custom-field-s-744522503.html</p>"},{"location":"section/configuration/jira/#description","title":"<code>description</code>","text":"<p>The <code>Description</code> field ID of Jira issues.</p> Environment variable <code>JIRA_FIELDS_DESCRIPTION</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nfields: {\ndescription: \"description\"\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_DESCRIPTION=description\n</code></pre>"},{"location":"section/configuration/jira/#labels","title":"<code>labels</code>","text":"<p>The <code>Labels</code> field ID of Jira issues.</p> Environment variable <code>JIRA_FIELDS_LABELS</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nfields: {\nlabels: \"labels\"\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_LABELS=labels\n</code></pre>"},{"location":"section/configuration/jira/#summary","title":"<code>summary</code>","text":"<p>The <code>Summary</code> field ID of Jira issues.</p> Environment variable <code>JIRA_FIELDS_SUMMARY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nfields: {\nsummary: \"summary\"\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_SUMMARY=summary\n</code></pre>"},{"location":"section/configuration/jira/#testplan","title":"<code>testPlan</code>","text":"<p>The <code>Test Plan</code> field ID of Xray test (execution) issues.</p> <p>Note</p> <p>This option is necessary for server instances only. Xray cloud provides ways to retrieve test plan field information independently of Jira.</p> Environment variable <code>JIRA_FIELDS_TEST_PLAN</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nfields: {\ntestPlan: \"customfield_12345\"\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_TEST_PLAN=customfield_12345\n</code></pre>"},{"location":"section/configuration/jira/#testtype","title":"<code>testType</code>","text":"<p>The <code>Test Type</code> field ID of Xray test issues.</p> <p>Note</p> <p>This option is necessary for server instances only. Xray cloud provides ways to retrieve test type field information independently of Jira.</p> Environment variable <code>JIRA_FIELDS_TEST_TYPE</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\nfields: {\ntestPlan: \"customfield_42069\"\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_FIELDS_TEST_TYPE=customfield_42069\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuedescription","title":"<code>testExecutionIssueDescription</code>","text":"<p>The description of test execution issues, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>testExecutionIssueKey</code>).</p> <p>If the <code>testExecutionIssueKey</code> is configured but the <code>testExecutionIssueDescription</code> is omitted, the existing test execution issue's description will not be modified.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION</code> Type <code>string</code> Default <code>`Cypress version: ${version} Browser: ${name} (${version})`</code> with values depending on Cypress and the chosen browser Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\ntestExecutionIssueDescription: \"This test run was approved by Mr Anderson.\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION=\"This test run was approved by Mr Anderson.\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuekey","title":"<code>testExecutionIssueKey</code>","text":"<p>The key of the test execution issue to attach the run results to. If omitted, Jira will always create a new test execution issue with each upload.</p> <p>Note</p> <p>Must be prefixed with the project key.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_KEY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\ntestExecutionIssueKey: \"PRJ-123\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_KEY=\"PRJ-123\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuesummary","title":"<code>testExecutionIssueSummary</code>","text":"<p>The summary of test execution issues, which will be used both for new test execution issues as well as for updating existing issues (if one was provided through <code>testExecutionIssueKey</code>).</p> <p>If the <code>testExecutionIssueKey</code> is configured but the <code>testExecutionIssueSummary</code> is omitted, the existing test execution issue's summary will not be modified.</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_SUMMARY</code> Type <code>string</code> Default <code>`Execution Results [${t}]`</code> with <code>t</code> being a Unix timestamp when Cypress started testing Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\ntestExecutionIssueSummary: \"Monday morning regression test\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_SUMMARY=\"Monday morning regression test\"\n</code></pre>"},{"location":"section/configuration/jira/#testexecutionissuetype","title":"<code>testExecutionIssueType</code>","text":"<p>The issue type name of test executions. By default, Xray calls them <code>Test Execution</code>, but it's possible that they have been renamed or translated in your Jira instance.</p> <p>Use this option to specify the type of the test executions the plugin should create for each run (if needed, see here).</p> Environment variable <code>JIRA_TEST_EXECUTION_ISSUE_TYPE</code> Type <code>string</code> Default <code>Test Execution</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\ntestExecutionIssueType: \"Test Run\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_EXECUTION_ISSUE_TYPE=\"Test Run\"\n</code></pre>"},{"location":"section/configuration/jira/#testplanissuekey","title":"<code>testPlanIssueKey</code>","text":"<p>A test plan issue key to attach the execution to.</p> <p>Note</p> <p>Must be prefixed with the project key.</p> Environment variable <code>JIRA_TEST_PLAN_ISSUE_KEY</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\ntestPlanIssueKey: \"PRJ-456\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_PLAN_ISSUE_KEY=\"PRJ-456\"\n</code></pre>"},{"location":"section/configuration/jira/#testplanissuetype","title":"<code>testPlanIssueType</code>","text":"<p>The issue type name of test plans. By default, Xray calls them <code>Test Plan</code>, but it's possible that they have been renamed or translated in your Jira instance.</p> <p>Note</p> <p>You can ignore this setting if:</p> <ul> <li>you're using Xray cloud or</li> <li>you're not running any Cucumber tests</li> </ul> <p>The plugin only accesses this option when:</p> <ul> <li>you're using Xray server and</li> <li>you're running Cucumber tests and</li> <li>a test plan issue key has been specified and it's trying to attach the test execution to it</li> </ul> Environment variable <code>JIRA_TEST_PLAN_ISSUE_TYPE</code> Type <code>string</code> Default <code>Test Plan</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\njira: {\ntestPlanIssueType: \"Plan de test\" // \ud83c\uddeb\ud83c\uddf7\n},\n});\n</code></pre> <pre><code>npx cypress run --env JIRA_TEST_PLAN_ISSUE_TYPE=\"Plan de test\"\n</code></pre>"},{"location":"section/configuration/openSSL/","title":"OpenSSL","text":"<p>Tip</p> <p>Make sure to check out the examples to see in which scenarios changing OpenSSL configuration might make sense.</p> <p>Sometimes it is necessary to configure OpenSSL if your Xray instance sits behind a proxy or uses dedicated root certificates that aren't available by default. In this case, you can set the following options prior to running your Cypress tests to configure the plugin's internal OpenSSL setup.</p>"},{"location":"section/configuration/openSSL/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/openSSL/#rootcapath","title":"<code>rootCAPath</code>","text":"<p>Specify the path to a root CA in <code>.pem</code> format. This will then be used during authentication &amp; communication with the Xray instance.</p> Environment variable <code>OPENSSL_ROOT_CA_PATH</code> Type <code>string</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nopenSSL: {\nrootCAPath: \"/home/cert.pem\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env OPENSSL_ROOT_CA_PATH=\"/home/cert.pem\"\n</code></pre>"},{"location":"section/configuration/openSSL/#secureoptions","title":"<code>secureOptions</code>","text":"<p>A crypto constant (see list below) that will be used to configure the <code>securityOptions</code> of the <code>https.Agent</code> used for sending requests to your Xray instance.</p> <p>Note</p> <p>Compute their bitwise OR if you need to set more than one option.</p> List of Security Options <p>The following list of OpenSSL security option constants can be obtained by running the following code in a node environment:</p> <pre><code>import { constants } from \"crypto\";\nconsole.log(constants);\n</code></pre> Name Value <code>OPENSSL_VERSION_NUMBER</code> 805306480 <code>SSL_OP_ALL</code> 2147485776 <code>SSL_OP_ALLOW_NO_DHE_KEX</code> 1024 <code>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</code> 262144 <code>SSL_OP_CIPHER_SERVER_PREFERENCE</code> 4194304 <code>SSL_OP_CISCO_ANYCONNECT</code> 32768 <code>SSL_OP_COOKIE_EXCHANGE</code> 8192 <code>SSL_OP_CRYPTOPRO_TLSEXT_BUG</code> 2147483648 <code>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</code> 2048 <code>SSL_OP_EPHEMERAL_RSA</code> 0 <code>SSL_OP_LEGACY_SERVER_CONNECT</code> 4 <code>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</code> 0 <code>SSL_OP_MICROSOFT_SESS_ID_BUG</code> 0 <code>SSL_OP_MSIE_SSLV2_RSA_PADDING</code> 0 <code>SSL_OP_NETSCAPE_CA_DN_BUG</code> 0 <code>SSL_OP_NETSCAPE_CHALLENGE_BUG</code> 0 <code>SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG</code> 0 <code>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</code> 0 <code>SSL_OP_NO_COMPRESSION</code> 131072 <code>SSL_OP_NO_ENCRYPT_THEN_MAC</code> 524288 <code>SSL_OP_NO_QUERY_MTU</code> 4096 <code>SSL_OP_NO_RENEGOTIATION</code> 1073741824 <code>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</code> 65536 <code>SSL_OP_NO_SSLv2</code> 0 <code>SSL_OP_NO_SSLv3</code> 33554432 <code>SSL_OP_NO_TICKET</code> 16384 <code>SSL_OP_NO_TLSv1</code> 67108864 <code>SSL_OP_NO_TLSv1_1</code> 268435456 <code>SSL_OP_NO_TLSv1_2</code> 134217728 <code>SSL_OP_NO_TLSv1_3</code> 536870912 <code>SSL_OP_PKCS1_CHECK_1</code> 0 <code>SSL_OP_PKCS1_CHECK_2</code> 0 <code>SSL_OP_PRIORITIZE_CHACHA</code> 2097152 <code>SSL_OP_SINGLE_DH_USE</code> 0 <code>SSL_OP_SINGLE_ECDH_USE</code> 0 <code>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</code> 0 <code>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</code> 0 <code>SSL_OP_TLS_BLOCK_PADDING_BUG</code> 0 <code>SSL_OP_TLS_D5_BUG</code> 0 <code>SSL_OP_TLS_ROLLBACK_BUG</code> 8388608 <code>ENGINE_METHOD_RSA</code> 1 <code>ENGINE_METHOD_DSA</code> 2 <code>ENGINE_METHOD_DH</code> 4 <code>ENGINE_METHOD_RAND</code> 8 <code>ENGINE_METHOD_EC</code> 2048 <code>ENGINE_METHOD_CIPHERS</code> 64 <code>ENGINE_METHOD_DIGESTS</code> 128 <code>ENGINE_METHOD_PKEY_METHS</code> 512 <code>ENGINE_METHOD_PKEY_ASN1_METHS</code> 1024 <code>ENGINE_METHOD_ALL</code> 65535 <code>ENGINE_METHOD_NONE</code> 0 <code>DH_CHECK_P_NOT_SAFE_PRIME</code> 2 <code>DH_CHECK_P_NOT_PRIME</code> 1 <code>DH_UNABLE_TO_CHECK_GENERATOR</code> 4 <code>DH_NOT_SUITABLE_GENERATOR</code> 8 <code>ALPN_ENABLED</code> 1 <code>RSA_PKCS1_PADDING</code> 1 <code>RSA_NO_PADDING</code> 3 <code>RSA_PKCS1_OAEP_PADDING</code> 4 <code>RSA_X931_PADDING</code> 5 <code>RSA_PKCS1_PSS_PADDING</code> 6 <code>RSA_PSS_SALTLEN_DIGEST</code> -1 <code>RSA_PSS_SALTLEN_MAX_SIGN</code> -2 <code>RSA_PSS_SALTLEN_AUTO</code> -2 <code>TLS1_VERSION</code> 769 <code>TLS1_1_VERSION</code> 770 <code>TLS1_2_VERSION</code> 771 <code>TLS1_3_VERSION</code> 772 <code>POINT_CONVERSION_COMPRESSED</code> 2 <code>POINT_CONVERSION_UNCOMPRESSED</code> 4 <code>POINT_CONVERSION_HYBRID</code> 6 Environment variable <code>OPENSSL_SECURE_OPTIONS</code> Type <code>number</code> Default <code>undefined</code> Example Cypress configurationEnvironment variable <pre><code>import { constants } from \"crypto\";\nawait configureXrayPlugin(config, {\nopenSSL: {\nsecureOptions: constants.SSL_OP_LEGACY_SERVER_CONNECT | constants.SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION; // 262148\n},\n});\n</code></pre> <pre><code>npx cypress run --env OPENSSL_SECURE_OPTIONS=262148\n</code></pre>"},{"location":"section/configuration/plugin/","title":"Plugin","text":"<p>The plugin offers several options for customizing the upload further.</p>"},{"location":"section/configuration/plugin/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/plugin/#debug","title":"<code>debug</code>","text":"<p>Turns on or off extensive debugging output.</p> Environment variable <code>PLUGIN_DEBUG</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nplugin: {\ndebug: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_DEBUG=true\n</code></pre>"},{"location":"section/configuration/plugin/#enabled","title":"<code>enabled</code>","text":"<p>Enables or disables the entire plugin. Setting this option to <code>false</code> disables all plugin functions, including authentication checks, uploads or feature file synchronization.</p> Environment variable <code>PLUGIN_ENABLED</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nplugin: {\nenabled: false\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_ENABLED=false\n</code></pre>"},{"location":"section/configuration/plugin/#logdirectory","title":"<code>logDirectory</code>","text":"<p>The directory which all error and debug log files will be written to.</p> Environment variable <code>PLUGIN_LOG_DIRECTORY</code> Type <code>string</code> Default <code>\"logs\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nplugin: {\nlogDirectory: \"/home/logs\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_LOG_DIRECTORY=\"/home/logs\"\n</code></pre>"},{"location":"section/configuration/plugin/#normalizescreenshotnames","title":"<code>normalizeScreenshotNames</code>","text":"<p>Some Xray setups might struggle with uploaded evidence if the filenames contain non-ASCII characters. With this option enabled, the plugin only keeps characters <code>a-zA-Z0-9.</code> in screenshot names and replaces all other sequences with <code>_</code>.</p> Environment variable <code>PLUGIN_NORMALIZE_SCREENSHOT_NAMES</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin({\nplugin: {\nnormalizeScreenshotNames: true\n},\n});\n</code></pre> <pre><code>npx cypress run --env PLUGIN_NORMALIZE_SCREENSHOT_NAMES=true\n</code></pre>"},{"location":"section/configuration/types/","title":"Option types","text":"<p>Below you will find accepted values of custom option types you can use when providing values to options through environment variables.</p>"},{"location":"section/configuration/types/#boolean","title":"Boolean","text":"Accepted values <ul> <li><code>true</code> <code>1</code> <code>yes</code> <code>y</code> <code>on</code></li> </ul> <ul> <li><code>false</code> <code>0</code> <code>no</code> <code>n</code> <code>off</code></li> </ul> <p>Example</p> <pre><code>npx cypress run --env XRAY_UPLOAD_RESULTS=yes\n</code></pre>"},{"location":"section/configuration/xray/","title":"Xray","text":"<p>You can provide a bunch of Xray settings which might become necessary depending on your project configuration.</p>"},{"location":"section/configuration/xray/#optional-settings","title":"Optional settings","text":""},{"location":"section/configuration/xray/#statusfailed","title":"<code>statusFailed</code>","text":"<p>The Xray status name of a test marked as failed by Cypress. Should be used when custom status names have been setup in Xray.</p> Environment variable <code>XRAY_STATUS_FAILED</code> Type <code>string</code> Default <code>\"FAIL\"</code> (when providing Xray server credentials) <code>\"FAILED\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nstatusFailed: \"FAILURE\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_FAILED=FAILURE\n</code></pre>"},{"location":"section/configuration/xray/#statuspassed","title":"<code>statusPassed</code>","text":"<p>The Xray status name of a test marked as passed by Cypress. Should be used when custom status names have been setup in Xray.</p> Environment variable <code>XRAY_STATUS_PASSED</code> Type <code>string</code> Default <code>\"PASS\"</code> (when providing Xray server credentials) <code>\"PASSED\"</code> (when providing Xray cloud credentials) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nstatusPassed: \"SUCCESS\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_PASSED=SUCCESS\n</code></pre>"},{"location":"section/configuration/xray/#statuspending","title":"<code>statusPending</code>","text":"<p>The Xray status name of a test marked as pending by Cypress. Should be used when custom status names have been setup in Xray.</p> Environment variable <code>XRAY_STATUS_PENDING</code> Type <code>string</code> Default <code>\"TODO\"</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nstatusPending: \"AWAITING EXECUTION\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_PENDING=\"AWAITING EXECUTION\"\n</code></pre>"},{"location":"section/configuration/xray/#statusskipped","title":"<code>statusSkipped</code>","text":"<p>The Xray status name of a test marked as skipped by Cypress. Should be used when custom status names have been setup in Xray.</p> Environment variable <code>XRAY_STATUS_SKIPPED</code> Type <code>string</code> Default <p><code>\"FAILED\"</code></p> <p>Note</p> <p>Defaults to <code>\"FAILED\"</code> because Cypress only skips test cases if errors occur, as described here.</p> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nstatusSkipped: \"IGNORED\"\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STATUS_SKIPPED=\"IGNORED\"\n</code></pre>"},{"location":"section/configuration/xray/#steps","title":"<code>steps</code>","text":"<p>All options related to manual test issue steps.</p>"},{"location":"section/configuration/xray/#maxlengthaction","title":"<code>maxLengthAction</code>","text":"<p>The maximum length a step's action description can have in terms of characters. Some Xray instances might enforce limits on the length and reject step updates in case the action's description exceeds said limit.</p> Environment variable <code>XRAY_STEPS_MAX_LENGTH_ACTION</code> Type <code>number</code> Default <code>8000</code> (more info) Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nsteps: {\nmaxLengthAction: 1234\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STEPS_MAX_LENGTH_ACTION=1234\n</code></pre>"},{"location":"section/configuration/xray/#update","title":"<code>update</code>","text":"<p>Whether to update a manual test issue's test steps during execution results upload.</p> <p>Warning</p> <p>If set to true (default), all existing steps will be replaced with the plugin's steps.</p> <p>Note</p> <p>The plugin currently creates only one step containing the code of the corresponding Cypress test function.</p> Environment variable <code>XRAY_STEPS_UPDATE</code> Type <code>boolean</code> Default <code>false</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nsteps: {\nupdate: true\n}\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_STEPS_UPDATE=true\n</code></pre>"},{"location":"section/configuration/xray/#uploadresults","title":"<code>uploadResults</code>","text":"<p>Turns execution results upload on or off. Useful when switching upload on or off from the command line (via environment variables).</p> Environment variable <code>XRAY_UPLOAD_RESULTS</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nuploadResults: false\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_RESULTS=false\n</code></pre>"},{"location":"section/configuration/xray/#uploadscreenshots","title":"<code>uploadScreenshots</code>","text":"<p>Turns on or off the upload of screenshots Cypress takes during test execution.</p> <p>Note</p> <p>This option only takes effect once <code>uploadResults</code> is turned on. It is not possible to upload screenshots without uploading results.</p> Environment variable <code>XRAY_UPLOAD_SCREENSHOTS</code> Type <code>boolean</code> Default <code>true</code> Example Cypress configurationEnvironment variable <pre><code>await configureXrayPlugin(config, {\nxray: {\nuploadScreenshots: false\n},\n});\n</code></pre> <pre><code>npx cypress run --env XRAY_UPLOAD_SCREENSHOTS_=false\n</code></pre>"},{"location":"section/guides/featureFileSynchronization/","title":"Feature file synchronization","text":"<p>The plugin allows you to keep your local feature files in sync with the step definitions in Xray.</p>"},{"location":"section/guides/featureFileSynchronization/#feature-file-upload","title":"Feature file upload","text":"Synchronize step definitions in Xray based on your local feature files. <p>Uploading feature files is useful if the source of truth for test cases are local feature files in Cypress and Xray is only used for tracking execution results. You can enable the upload using the <code>uploadFeatures</code> setting and by making sure that feature file synchronization is enabled.</p> <p>Tip</p> <p>Don't forget to add tags to your backgrounds, scenarios and scenario outlines. Uploads of untagged feature files will always be skipped as a precautionary measure.</p> Example <p>In the following scenario, the existing example will be extended by an additional step.</p> demo.spec.featuredemo.spec.jscypress.config.jsVideo <pre><code>Feature: Example page redirection\n    @TestName:CYP-129\nScenario: Redirect by clicking\n        Given the example page\nWhen the link is clicked\nThen a redirect should occur\nAnd the test should fail\n</code></pre> <pre><code>import { Given, Then, When } from \"@badeball/cypress-cucumber-preprocessor\";\nGiven(\"the example page\", function () {\ncy.visit(\"https://example.org\");\n});\nWhen(\"the link is clicked\", function () {\n// Intercept the click, since it unfortunately redirects to a http:// location\n// and causes Cypress to abort the execution.\ncy.intercept(\"GET\", \"https://www.iana.org/domains/example\", (request) =&gt; {\nrequest.reply(\"link was clicked\");\n}).as(\"redirect\");\ncy.get(\"a\").click();\n});\nThen(\"a redirect should occur\", function () {\ncy.wait(\"@redirect\").then((request) =&gt; {\nexpect(request.response.body).to.eq(\"link was clicked\");\n});\n});\nThen(\"the test should fail\", function () {\nexpect(true).to.be.false;\n});\n</code></pre> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport * as createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { addXrayResultUpload, configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin\";\nimport fix from \"cypress-on-fix\";\n// ...\nasync setupNodeEvents(on, config) {\nconst fixedOn = fix(on);\nawait configureXrayPlugin(\nconfig,\n{\njira: {\nprojectKey: \"CYP\",\nurl: \"https://example.atlassian.net\"\n}\ncucumber: {\nfeatureFileExtension: \".feature\",\nuploadFeatures: true\n}\n}\n);\nawait addCucumberPreprocessorPlugin(fixedOn, config);\nawait addXrayResultUpload(fixedOn);\nfixedOn(\"file:preprocessor\", async (file) =&gt; {\nawait syncFeatureFile(file);\nconst cucumberPlugin = createBundler({\nplugins: [createEsbuildPlugin(config)],\n});\nreturn cucumberPlugin(file);\n});\nreturn config;\n}\n// ...\n</code></pre> <p>Please note the the steps and the issue's summary changing due to the feature import.</p> <p>      Your browser does not support the video tag. </p>"},{"location":"section/guides/featureFileSynchronization/#language-support","title":"Language support","text":"<p>By default, Xray expects feature files to use English keywords. If you want to use different languages, make sure to add the corresponding <code># language:</code> header to your feature files, as described here.</p> <p>Example</p> <pre><code># language: de\nFunktionalit\u00e4t: Weiterleitung Beispielseite\n    @TestName:CYP-129\nSzenario: Weiterleitung durch Klick\n        Angenommen Beispielseite\nWenn Klick auf Link\nDann Weiterleitung findet statt\n</code></pre>"},{"location":"section/guides/featureFileSynchronization/#feature-file-download","title":"Feature file download","text":"<p>Development</p> <p>Synchronization of local feature files based on the step definitions as managed in Xray is currently still being worked on (i.e. download of Xray step definitions to local feature files and then running them).</p>"},{"location":"section/guides/openSSL/","title":"OpenSSL","text":"<p>It is not unlikely that you will find yourself sitting behind a proxy or for your Xray instance to be accessible through VPN only. In such scenarios, default HTTP requests might fail because of security concerns.</p> <p>Here, you will find a list of common security issues and how to approach them.</p>"},{"location":"section/guides/openSSL/#trusting-custom-root-cas","title":"Trusting custom root CAs","text":"<p>In case an Xray instance is setup on an internal network with custom CA certificates, you will need to download these certificates and provide them to the Xray plugin.</p> <p>Error messages requiring you to provide custom SSL certificates might look like any of the following:</p> <p>Error: unable to get issuer certificate</p> <p>Error: unable to verify the first certificate</p> <p>Solution</p> <p>Download the SSL certificate of your CA and make sure it is in <code>.pem</code> format. Then, tell the plugin to trust that CA by providing the certificate's path in the options:</p> <pre><code>await configureXrayPlugin(config, {\nopenSSL: {\nrootCAPath: \"/home/cert.pem\"\n},\n});\n</code></pre>"},{"location":"section/guides/openSSL/#providing-security-options","title":"Providing security options","text":"<p>Some webservers might run outdated or legacy code, including the one where your Xray instance might be installed. Modern HTTP clients usually reject communication attempts to such servers out of security considerations. The clients can however be told to allow insecure communcation by setting appropriate flags.</p> <p>Error messages requiring you to provide security options might look like any of the following:</p> <p>Error: unsafe legacy renegotiation disabled</p> <p>Solution</p> <p>Allow legacy insecure renegotiation between OpenSSL and unpatched clients or servers:</p> <pre><code>import { constants } from \"crypto\";\nawait configureXrayPlugin(config, {\nopenSSL: {\nsecureOptions: constants.SSL_OP_LEGACY_SERVER_CONNECT,\n},\n});\n</code></pre>"},{"location":"section/guides/targetingExistingIssues/","title":"Targeting existing issues","text":"<p>The plugin does not upload any results unless you reuse existing Jira issues to not clutter up your projects with unnecessary test case (or test execution) issues. This section teaches you everything you need to know to target such existing issues.</p>"},{"location":"section/guides/targetingExistingIssues/#reuse-cypress-issues","title":"Reuse Cypress issues","text":"<p>To link Cypress tests to Jira issues, simply add the test case issue's key anywhere in the name of the innermost <code>it()</code> function (or corresponding alternatives like <code>specify()</code>):</p> <pre><code>describe(\"a suite\", () =&gt; {\nit(\"PRJ-123 has a test case\", () =&gt; {\n// ...\n});\n});\n</code></pre> <p>  The plugin parses all test case names and looks for sequences of the form <code>&lt;projectKey&gt;-&lt;number&gt;</code>, with <code>&lt;projectKey&gt;</code> being the configured project key and <code>&lt;number&gt;</code> the issue number.</p>"},{"location":"section/guides/targetingExistingIssues/#reuse-cucumber-issues","title":"Reuse Cucumber issues","text":"<p>To link your Cucumber feature files to existing Jira issues, you need to tag both scenario (outlines) and backgrounds. The tagging schemes follow the schemes Xray expects when importing feature files (see here or here).</p>"},{"location":"section/guides/targetingExistingIssues/#test-issues","title":"Test issues","text":"<p>In feature files, you must annotate scenarios (or scenario outlines) with a tag containing the corresponding test case issue key.</p> Xray serverXray cloud <pre><code>Feature: Shopping cart\n@CYP-129\nScenario: Add socks\n    Given Bob is logged in\nWhen three socks are added from the shop\nThen the shopping cart should contain three socks\n</code></pre> <pre><code>Feature: Shopping cart\n@TestName:CYP-129\nScenario: Add socks\n    Given Bob is logged in\nWhen three socks are added from the shop\nThen the shopping cart should contain three socks\n</code></pre>"},{"location":"section/guides/targetingExistingIssues/#precondition-issues","title":"Precondition issues","text":"<p>In feature files, you must add a comment to a background's very first step containing the tag for a corresponding precondition issue key.</p> <p>Note</p> <p>You can find more information about preconditions here for Xray server and here for Xray cloud.</p> Xray serverXray cloud <pre><code>Feature: Big feature on lovely page\nBackground:\n    #@CYP-332\n    Given a browser\nThen the lovely page should open\n</code></pre> <pre><code>Feature: Big feature on lovely page\nBackground:\n    #@Precondition:CYP-332\n    Given a browser\nThen the lovely page should open\n</code></pre>"},{"location":"section/guides/targetingExistingIssues/#reuse-test-execution-issues","title":"Reuse test execution issues","text":"<p>By default, the plugin will always create a new test execution issue whenever you upload test results.</p> <p>You can prevent that from happening by specifying the test execution issue key you want to attach the results to.</p>"},{"location":"section/guides/uploadTestResults/","title":"Upload test results","text":"The plugin allows you to upload Cypress test results to Xray server or Xray cloud."},{"location":"section/guides/uploadTestResults/#setup","title":"Setup","text":"<p>To upload your test results to Xray, make sure you have enabled the results upload in your configuration file:</p> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin(config, {\nxray: {\nuploadResults: true\n}\n});\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre> <p>Afterwards, simply run Cypress:</p> <pre><code>npx cypress run\n</code></pre> <p>Note</p> <p>Don't forget to provide your authentication credentials.</p>"},{"location":"section/guides/uploadTestResults/#how-it-works","title":"How it works","text":"<p>The plugin will only upload results for tests you have linked to existing test issues.</p> <p>The plugin will also create a new test execution issue, unless you tell it to reuse a specific test execution issue.</p> Xray Documentation <p>You can find more information on the mechanisms and constraints regarding imports of test execution results here for Xray server and here for Xray cloud.</p> Example <p>The following example consists of three test cases for https://example.org:</p> <ol> <li> The first one tries to find an <code>&lt;h1&gt;</code> element with text <code>Example Domain</code>.</li> <li> The second one asserts that the page contains an <code>&lt;a&gt;</code> element with a <code>href</code> attribute.</li> <li> The third one tries to find an <code>&lt;img&gt;</code> element, which does not exist on the page.</li> </ol> <p>When uploading the results, the plugin will create a test execution issue containing the three executed test issues. Since Cypress automatically takes screenshots on failure, the execution will also contain the screenshot as evidence for the failed test case.</p> <p>A corresponding video can be seen here.</p> demo.spec.cy.jscypress.config.js <pre><code>describe(\"the upload demo\", () =&gt; {\nbeforeEach(() =&gt; {\ncy.visit(\"https://example.org\");\n});\nit(\"CYP-410 Contains a title\", () =&gt; {\ncy.get(\"h1\").should(\"contain.text\", \"Example Domain\");\n});\nit(\"CYP-411 Contains a link\", () =&gt; {\ncy.get(\"a\").should(\"have.attr\", \"href\");\n});\nit(\"CYP-412 Fails a test\", () =&gt; {\ncy.get(\"img\").should(\"be.visible\");\n});\n})\n</code></pre> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin(config, {\njira: {\nprojectKey: \"CYP\",\nurl: \"https://atlassian.com\"\n},\nxray: {\nuploadResults: true\n}\n});\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre>"},{"location":"section/setup/installation/","title":"Installation","text":"<p>Run the following command to add the plugin to your Cypress project:</p> <pre><code>npm install --save-dev cypress-xray-plugin\n</code></pre> <p>This plugin easily handles:</p> <ul> <li>Cypress test executions: JavaScript/TypeScript specs</li> <li>Cucumber test executions: Cucumber feature files</li> </ul> <p>Below you will find the two ways to setup the plugin's basics, one for Cypress tests only (when not running Cucumber feature files) and for added Cucumber support.</p>"},{"location":"section/setup/installation/#cypress-tests","title":"Cypress tests","text":"<p>Modify the <code>setupNodeEvents()</code> function in your Cypress configuration file as follows:</p> <pre><code>import { addXrayResultUpload, configureXrayPlugin } from \"cypress-xray-plugin\";\n// ...\nasync setupNodeEvents(on, config) {\nawait configureXrayPlugin(\nconfig,\n{\njira: {\nprojectKey: \"PRJ\",         // placeholder value\nurl: \"https://example.org\" // placeholder value\n}\n}\n);\nawait addXrayResultUpload(on);\n}\n// ...\n</code></pre> <p>Tip</p> <p>Check out the configuration for more information on how you should configure the plugin to make it work within your infrastructure. You can also shoot a glance at the examples for a more hands-on approach.</p>"},{"location":"section/setup/installation/#cucumber-tests","title":"Cucumber tests","text":"<p>For Cucumber support, this plugin builds upon the <code>cypress-cucumber-preprocessor</code> plugin for executing Cucumber feature files.</p> <p>With added Xray synchronization, this plugin allows you to automatically upload feature files to Xray when running your Cypress tests and to track their execution results in Xray.</p> <p>Run the additional following commands to handle Cucumber test executions as well:</p> <pre><code>npm install --save-dev @badeball/cypress-cucumber-preprocessor\nnpm install --save-dev @bahmutov/cypress-esbuild-preprocessor\nnpm install --save-dev cypress-on-fix\n</code></pre> <p>Note</p> <p>Package <code>cypress-on-fix</code> is required for registering multiple event handlers to Cypress's events (see here).</p> <p>To enable the plugin, modify the <code>setupNodeEvents()</code> function in your Cypress configuration file as follows:</p> <pre><code>import { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nimport createEsbuildPlugin from \"@badeball/cypress-cucumber-preprocessor/esbuild\";\nimport * as createBundler from \"@bahmutov/cypress-esbuild-preprocessor\";\nimport { addXrayResultUpload, configureXrayPlugin, syncFeatureFile } from \"cypress-xray-plugin\";\nimport fix from \"cypress-on-fix\";\n// ...\nasync setupNodeEvents(on, config) {\nconst fixedOn = fix(on);\nawait configureXrayPlugin(\nconfig,\n{\njira: {\nprojectKey: \"PRJ\",\nurl: \"https://example.org\"\n}\ncucumber: {\nfeatureFileExtension: \".feature\"\n}\n}\n);\nawait addCucumberPreprocessorPlugin(fixedOn, config);\nawait addXrayResultUpload(fixedOn);\nfixedOn(\"file:preprocessor\", async (file) =&gt; {\nawait syncFeatureFile(file);\nconst cucumberPlugin = createBundler({\nplugins: [createEsbuildPlugin(config)],\n});\nreturn cucumberPlugin(file);\n});\nreturn config;\n}\n// ...\n</code></pre> <p>The highlighted lines are the ones addressing Xray support.</p> Lines 10-21 <p>Here you should configure the Xray plugin the way you want it to work with your Xray instance. Read this for more information.</p> Line 23 <p>This line enables the upload of test results to your Xray instance when Cypress is done running your tests.</p> Line 25 <p>This line enables upstream and downstream synchronization of your feature files with your Xray instance. See here for more information.</p>"},{"location":"section/setup/requirements/","title":"Requirements","text":""},{"location":"section/setup/requirements/#nodejs-v18","title":"Node.js v18+","text":"<p>Since this plugin runs within the Cypress ecosphere, Node.js is required to run it along Cypress. With you using Cypress, you probably have installed it already.</p> <p>Info</p> <p>Type <code>node --version</code> in a terminal to check if v18 or above is installed already.</p>"}]}